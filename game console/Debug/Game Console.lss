
Game Console.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00001cac  00001d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000201  008000c2  008000c2  00001da2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001da2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000350  00000000  00000000  00001dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003bab  00000000  00000000  00002122  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000121b  00000000  00000000  00005ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001277  00000000  00000000  00006ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000898  00000000  00000000  00008160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000af3  00000000  00000000  000089f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000231d  00000000  00000000  000094eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000330  00000000  00000000  0000b808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 03 	jmp	0x654	; 0x654 <__ctors_end>
       4:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_1>
       8:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
       c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_3>
      10:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      14:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      18:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      1c:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      20:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      24:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      28:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      2c:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      30:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      34:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      38:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      3c:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      40:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      44:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      48:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>
      4c:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_19>
      50:	0c 94 47 03 	jmp	0x68e	; 0x68e <__bad_interrupt>

00000054 <Font8x5>:
      54:	00 00 00 00 00 00 00 64 18 04 64 18 00 3c 40 40     .......d..d..<@@
      64:	20 7c 00 0c 30 40 30 0c 00 3c 40 30 40 3c 00 00      |..0@0..<@0@<..
      74:	3e 1c 08 00 00 04 1e 1f 1e 04 00 10 3c 7c 3c 10     >...........<|<.
      84:	00 20 40 3e 01 02 00 22 14 08 14 22 00 00 38 28     . @>..."..."..8(
      94:	38 00 00 00 10 38 10 00 00 00 00 10 00 00 00 08     8....8..........
      a4:	78 08 00 00 00 00 15 15 0a 00 00 7f 7f 09 09 01     x...............
      b4:	00 10 20 7f 01 01 00 04 04 00 01 1f 00 00 19 15     .. .............
      c4:	12 00 00 40 60 50 48 44 00 06 09 09 06 00 00 0f     ...@`PHD........
      d4:	02 01 01 00 00 00 01 1f 01 00 00 44 44 4a 4a 51     ...........DDJJQ
      e4:	00 14 74 1c 17 14 00 51 4a 4a 44 44 00 00 00 04     ..t....QJJDD....
      f4:	04 04 00 00 7c 54 54 44 00 08 08 2a 1c 08 00 7c     ....|TTD...*...|
     104:	00 7c 44 7c 00 04 02 7f 02 04 00 10 20 7f 20 10     .|D|........ . .
	...
     11c:	00 6f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     .o..............
     12c:	00 00 07 04 1e 00 00 23 13 08 64 62 00 36 49 56     .......#..db.6IV
     13c:	20 50 00 00 00 07 00 00 00 00 1c 22 41 00 00 00      P........."A...
     14c:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
     15c:	00 00 50 30 00 00 00 08 08 08 08 08 00 00 60 60     ..P0..........``
     16c:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     17c:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
     18c:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
     19c:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     1ac:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
     1bc:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
     1cc:	14 08 00 02 01 51 09 06 00 3e 41 5d 49 4e 00 7e     .....Q...>A]IN.~
     1dc:	09 09 09 7e 00 7f 49 49 49 36 00 3e 41 41 41 22     ...~..III6.>AAA"
     1ec:	00 7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09     ..AAA>..IIIA....
     1fc:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     20c:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     21c:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     22c:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     23c:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     24c:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 0f 30 40     .......?@@@?..0@
     25c:	30 0f 00 3f 40 30 40 3f 00 63 14 08 14 63 00 07     0..?@0@?.c...c..
     26c:	08 70 08 07 00 61 51 49 45 43 00 3c 4a 49 29 1e     .p...aQIEC.<JI).
     27c:	00 02 04 08 10 20 00 00 41 7f 00 00 00 04 02 01     ..... ..A.......
     28c:	02 04 00 40 40 40 40 40 00 00 00 03 04 00 00 20     ...@@@@@....... 
     29c:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     2ac:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     2bc:	01 02 00 0c 52 52 52 3e 00 7f 08 04 04 78 00 00     ....RRR>.....x..
     2cc:	44 7d 40 00 00 20 40 44 3d 00 00 00 7f 10 28 44     D}@.. @D=.....(D
     2dc:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     2ec:	04 78 00 38 44 44 44 38 00 7c 14 14 14 08 00 08     .x.8DDD8.|......
     2fc:	14 14 18 7c 00 7c 08 04 04 08 00 48 54 54 54 20     ...|.|.....HTTT 
     30c:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     31c:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 0c      ..<@0@<.D(.(D..
     32c:	50 50 50 3c 00 44 64 54 4c 44 00 00 08 36 41 41     PPP<.DdTLD...6AA
     33c:	00 00 00 7f 00 00 00 41 41 36 08 00 00 04 02 04     .......AA6......
     34c:	08 04 00 7f 6b 6b 6b 7f 00 00 7c 44 7c 00 00 00     ....kkk...|D|...
     35c:	08 7c 00 00 00 00 64 54 48 00 00 00 44 54 28 00     .|....dTH...DT(.
     36c:	00 00 1c 10 78 00 00 00 5c 54 24 00 00 00 78 54     ....x...\T$...xT
     37c:	74 00 00 00 64 14 0c 00 00 00 7c 54 7c 00 00 00     t...d.....|T|...
     38c:	5c 54 3c 00 00 78 24 26 25 78 00 78 25 26 24 78     \T<..x$&%x.x%&$x
     39c:	00 70 2a 29 2a 70 00 78 25 24 25 78 00 20 54 56     .p*)*p.x%$%x. TV
     3ac:	55 78 00 20 55 56 54 78 00 20 56 55 56 78 00 20     Ux. UVTx. VUVx. 
     3bc:	55 54 55 78 00 7c 54 56 55 44 00 7c 55 56 54 44     UTUx.|TVUD.|UVTD
     3cc:	00 7c 56 55 56 44 00 7c 55 54 55 44 00 38 54 56     .|VUVD.|UTUD.8TV
     3dc:	55 18 00 38 55 56 54 18 00 38 56 55 56 18 00 38     U..8UVT..8VUV..8
     3ec:	55 54 55 18 00 00 44 7e 45 00 00 00 45 7e 44 00     UTU...D~E...E~D.
     3fc:	00 00 46 7d 46 00 00 00 45 7c 45 00 00 00 48 7a     ..F}F...E|E...Hz
     40c:	41 00 00 00 49 7a 40 00 00 00 4a 79 42 00 00 00     A...Iz@...JyB...
     41c:	49 78 41 00 00 38 44 46 45 38 00 38 45 46 44 38     IxA..8DFE8.8EFD8
     42c:	00 38 46 45 46 38 00 38 45 44 45 38 00 30 48 4a     .8FEF8.8EDE8.0HJ
     43c:	49 30 00 30 49 4a 48 30 00 30 4a 49 4a 30 00 30     I0.0IJH0.0JIJ0.0
     44c:	49 48 49 30 00 3c 40 42 41 3c 00 3c 41 42 40 3c     IHI0.<@BA<.<AB@<
     45c:	00 3c 42 41 42 3c 00 3c 41 40 41 3c 00 3c 40 42     .<BAB<.<A@A<.<@B
     46c:	21 7c 00 3c 41 42 20 7c 00 38 42 41 22 78 00 3c     !|.<AB |.8BA"x.<
     47c:	41 40 21 7c 00 4e 51 71 11 0a 00 58 64 64 24 10     A@!|.NQq...Xdd$.
     48c:	00 7c 0a 11 22 7d 00 78 12 09 0a 71 00 00 00 04     .|.."}.x...q....
     49c:	02 01 00 01 02 04 00 00 00 00 02 00 02 00 00 30     ...............0
     4ac:	48 45 40 20 00 00 00 7b 00 00 00 38 44 44 38 44     HE@ ...{...8DD8D
     4bc:	00 40 3e 49 49 36 00 08 04 08 70 0c 00 60 50 48     .@>II6....p..`PH
     4cc:	50 60 00 20 52 55 59 30 00 38 54 54 54 00 00 00     P`. RUY0.8TTT...
     4dc:	00 7f 41 00 00 40 22 14 18 60 00 7c 20 20 1c 20     ..A..@"..`.|  . 
     4ec:	00 44 3c 04 7c 44 00 40 3c 12 12 0c 00 41 63 55     .D<.|D.@<....AcU
     4fc:	49 41 00 38 44 44 3c 04 00 08 04 3c 44 24 00 08     IA.8DD<....<D$..
     50c:	14 7f 14 08 00 4e 71 01 71 4e 00 45 29 11 29 45     .....Nq.qN.E).)E
     51c:	00 0d 51 51 51 3d 00 00 00 05 02 05 00 40 00 40     ..QQQ=.......@.@
     52c:	00 40 00 00 08 1c 3e 00 00 1c 1c 1c 00 00 00 00     .@....>.........
     53c:	70 08 07 00 00 00 08 08 08 00 00 00 1d 15 17 00     p...............
     54c:	00 00 07 05 07 00 00 00 11 15 0a 00 00 00 00 00     ................
     55c:	00 00 00 04 3c 41 20 00 00 7c 16 15 16 08 00 21     ....<A ..|.....!
     56c:	16 08 34 42 00 7f 09 1d 01 03 00 38 54 54 14 08     ..4B.......8TT..
     57c:	00 00 00 7c 40 40 00 7f 0e 1c 38 7f 00 41 22 5d     ...|@@....8..A"]
     58c:	22 1c 00 1c 3e 1c 08 00 00 7f 7f 7f 7f 7f 00 77     "...>..........w
     59c:	7b 01 7b 77 00 7f 43 75 43 7f 00 7f 6f 55 43 7f     {.{w..CuC...oUC.
     5ac:	00 40 40 40 40 40 00 44 42 5f 42 44 00 40 5e 45     .@@@@@.DB_BD.@^E
     5bc:	5e 40 00 40 48 55 5e 40 00 00 04 08 10 20 00 03     ^@.@HU^@..... ..
     5cc:	07 0e 1c 38 00 01 03 07 0f 1f 00 7c 78 70 60 40     ...8.......|xp`@
     5dc:	00 08 08 1c 22 1c 00 00 1c 22 1c 00 00 02 00 08     ...."...."......
     5ec:	00 20 00 04 3e 3f 3e 04 00 10 3e 7e 3e 10 00 55     . ..>?>...>~>..U
     5fc:	2a 55 2a 55 00 24 2a 7f 2a 12 00 04 1e 1f 1e 04     *U*U.$*.*.......
	...

00000654 <__ctors_end>:
     654:	11 24       	eor	r1, r1
     656:	1f be       	out	0x3f, r1	; 63
     658:	cf e5       	ldi	r28, 0x5F	; 95
     65a:	d4 e0       	ldi	r29, 0x04	; 4
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	cd bf       	out	0x3d, r28	; 61

00000660 <__do_copy_data>:
     660:	10 e0       	ldi	r17, 0x00	; 0
     662:	a0 e6       	ldi	r26, 0x60	; 96
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	ec ea       	ldi	r30, 0xAC	; 172
     668:	fc e1       	ldi	r31, 0x1C	; 28
     66a:	02 c0       	rjmp	.+4      	; 0x670 <__do_copy_data+0x10>
     66c:	05 90       	lpm	r0, Z+
     66e:	0d 92       	st	X+, r0
     670:	a2 3c       	cpi	r26, 0xC2	; 194
     672:	b1 07       	cpc	r27, r17
     674:	d9 f7       	brne	.-10     	; 0x66c <__do_copy_data+0xc>

00000676 <__do_clear_bss>:
     676:	22 e0       	ldi	r18, 0x02	; 2
     678:	a2 ec       	ldi	r26, 0xC2	; 194
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	01 c0       	rjmp	.+2      	; 0x680 <.do_clear_bss_start>

0000067e <.do_clear_bss_loop>:
     67e:	1d 92       	st	X+, r1

00000680 <.do_clear_bss_start>:
     680:	a3 3c       	cpi	r26, 0xC3	; 195
     682:	b2 07       	cpc	r27, r18
     684:	e1 f7       	brne	.-8      	; 0x67e <.do_clear_bss_loop>
     686:	0e 94 e7 08 	call	0x11ce	; 0x11ce <main>
     68a:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <_exit>

0000068e <__bad_interrupt>:
     68e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000692 <battery_init>:

/* Initialise the button input pins and the 
 * battery low LED output pin */
void battery_init() {
	// Setup output port for batt_low LED
	BATT_LOW_DIR_PORT |= _BV(BATT_LOW_LED_PIN);
     692:	a1 9a       	sbi	0x14, 1	; 20
	BATT_LOW_PORT |= _BV(BATT_LOW_LED_PIN);
     694:	a9 9a       	sbi	0x15, 1	; 21
     696:	08 95       	ret

00000698 <get_battery_level>:
}

// Returns the 10-bit analog reading of the battery level
uint16_t get_battery_level() {
	return adc_read_channel(BATTERY_SENSE_PIN);
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <adc_read_channel>

0000069e <check_battery_level>:

/* Reads the battery level and alerts the user with an LED if it is
   below a set threshold. */
void check_battery_level() {
	// Get battery reading
	uint16_t battery_level = adc_read_channel(BATTERY_SENSE_PIN);
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <adc_read_channel>
	
	// Check if battery level is lower than threshold
	if(battery_level < BATT_LOW_VOLTAGE_THRESHOLD) {
     6a4:	86 35       	cpi	r24, 0x56	; 86
     6a6:	91 40       	sbci	r25, 0x01	; 1
     6a8:	10 f4       	brcc	.+4      	; 0x6ae <check_battery_level+0x10>
	}
}

/* Low battery led ON */
static void set_low_batt_led() {
	BATT_LOW_PORT &= ~_BV(BATT_LOW_LED_PIN);
     6aa:	a9 98       	cbi	0x15, 1	; 21
     6ac:	08 95       	ret
}

/* Low battery led OFF */
static void clear_low_batt_led() {
	BATT_LOW_PORT |= _BV(BATT_LOW_LED_PIN);
     6ae:	a9 9a       	sbi	0x15, 1	; 21
     6b0:	08 95       	ret

000006b2 <setup_interrupts>:
 * If we end up polling them for input anyway, why
 * watch for an interrupt?
 */ 
static void buttons_interrupt_init(void) {
	// Enable interrupt requests to be generated by INT0
	GICR  |= _BV(INT0);
     6b2:	8b b7       	in	r24, 0x3b	; 59
     6b4:	80 64       	ori	r24, 0x40	; 64
     6b6:	8b bf       	out	0x3b, r24	; 59
	
	// The rising edge of INT0 will trigger an interrupt
	MCUCR |= _BV(ISC00) | _BV(ISC01);
     6b8:	85 b7       	in	r24, 0x35	; 53
     6ba:	83 60       	ori	r24, 0x03	; 3
     6bc:	85 bf       	out	0x35, r24	; 53
}

// Timer/Counter0 used for controlling the backlight brightness using PWM
static void lcd_backlight_timer_init(void) {
	LCD_BACKLIGHT_PORT_DIR |= _BV(LCD_BACKLIGHT_PIN);   // Output pin
     6be:	bb 9a       	sbi	0x17, 3	; 23
	TCCR0 |= _BV(WGM01) | _BV(WGM00);					// Fast PWM mode
     6c0:	83 b7       	in	r24, 0x33	; 51
     6c2:	88 64       	ori	r24, 0x48	; 72
     6c4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= _BV(COM01) | _BV(COM00);					// Set OC0 on compare match, clear OC0 at BOTTOM
     6c6:	83 b7       	in	r24, 0x33	; 51
     6c8:	80 63       	ori	r24, 0x30	; 48
     6ca:	83 bf       	out	0x33, r24	; 51
	//TCCR0 |= _BV(CS02) | _BV(CS00);						// 1024 clock prescaling, ~30Hz update
	//TCCR0 |= _BV(CS02);								// 256 clock prescaling,  ~122Hz update (see below)
	TCCR0 |= _BV(CS01) | _BV(CS00);					// 64 clock prescaling, ~500Hz update
     6cc:	83 b7       	in	r24, 0x33	; 51
     6ce:	83 60       	ori	r24, 0x03	; 3
     6d0:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= _BV(OCIE0); // Enable interrupt.
     6d2:	89 b7       	in	r24, 0x39	; 57
     6d4:	82 60       	ori	r24, 0x02	; 2
     6d6:	89 bf       	out	0x39, r24	; 57
		Using 256 prescaling,
		= 122Hz
	*/
	
	// Start backlight brightness at 0% completely OFF
	OCR0 = BACKLIGHT_START_BRIGHTNESS;
     6d8:	88 ec       	ldi	r24, 0xC8	; 200
     6da:	8c bf       	out	0x3c, r24	; 60

// Timer/Counter2 used for controlling the refresh rate of the LCD
// 
static void lcd_update_timer_init(void) {
	// Clears timer when counter == OCR2
	TCCR2 |= _BV(WGM21) | _BV(WGM20); // Clear Timer on Compare Match (CTC)
     6dc:	85 b5       	in	r24, 0x25	; 37
     6de:	88 64       	ori	r24, 0x48	; 72
     6e0:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= _BV(CS22) | _BV(CS21) | _BV(CS20); // 1024 prescaler
     6e2:	85 b5       	in	r24, 0x25	; 37
     6e4:	87 60       	ori	r24, 0x07	; 7
     6e6:	85 bd       	out	0x25, r24	; 37
	TIMSK |= _BV(OCIE2); // Compare Match interrupt enable
     6e8:	89 b7       	in	r24, 0x39	; 57
     6ea:	80 68       	ori	r24, 0x80	; 128
     6ec:	89 bf       	out	0x39, r24	; 57
	
	OCR2 = 255;
     6ee:	8f ef       	ldi	r24, 0xFF	; 255
     6f0:	83 bd       	out	0x23, r24	; 35
     6f2:	08 95       	ret

000006f4 <__vector_3>:
/*---------- INTERRUPT SERVICE ROUTINES ----------*/

// LCD update interrupt
// Might need to move the call of LCD_update() out of an interrupt call

ISR(TIMER2_COMP_vect) {
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
	//send_buffer_page();
	//send_buffer_page_flag = 1;
}
     6fe:	0f 90       	pop	r0
     700:	0f be       	out	0x3f, r0	; 63
     702:	0f 90       	pop	r0
     704:	1f 90       	pop	r1
     706:	18 95       	reti

00000708 <__vector_1>:

// Button interrupt routine
ISR(INT0_vect) {
     708:	1f 92       	push	r1
     70a:	0f 92       	push	r0
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	0f 92       	push	r0
     710:	11 24       	eor	r1, r1
     712:	8f 93       	push	r24
	//if(active_buttons & _BV(BUTTON_RIGHT)) x_movement = 1;
	//if(active_buttons & _BV(BUTTON_A1))    action1 = 1;
	//if(active_buttons & _BV(BUTTON_A2))    action2 = 1;
	
	// Backlight control
	if(active_buttons & _BV(BUTTON_BL_PIN)) {
     714:	80 99       	sbic	0x10, 0	; 16
     716:	0d c0       	rjmp	.+26     	; 0x732 <__vector_1+0x2a>
		// If backlight is OFF, turn it back ON
		if(OCR0 >= BACKLIGHT_MIN_BRIGHTNESS) {
     718:	8c b7       	in	r24, 0x3c	; 60
     71a:	8f 3f       	cpi	r24, 0xFF	; 255
     71c:	11 f4       	brne	.+4      	; 0x722 <__vector_1+0x1a>
			OCR0 = BACKLIGHT_MAX_BRIGHTNESS;
     71e:	1c be       	out	0x3c, r1	; 60
     720:	08 c0       	rjmp	.+16     	; 0x732 <__vector_1+0x2a>
		} else {
			if(OCR0 == 225) {
     722:	8c b7       	in	r24, 0x3c	; 60
     724:	81 3e       	cpi	r24, 0xE1	; 225
     726:	11 f4       	brne	.+4      	; 0x72c <__vector_1+0x24>
				OCR0 = BACKLIGHT_MIN_BRIGHTNESS; // completely OFF
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	02 c0       	rjmp	.+4      	; 0x730 <__vector_1+0x28>
			} else {
				OCR0 += LCD_BACKLIGHT_INCREMENT;
     72c:	8c b7       	in	r24, 0x3c	; 60
     72e:	87 5e       	subi	r24, 0xE7	; 231
     730:	8c bf       	out	0x3c, r24	; 60
			// Add backlight increment because setting OC0 at OCR0
			// and clearing OC0 at BOTTOM.
			// A larger value for OCR0 will mean less time 'on' (smaller duty cycle).
		}
	}
}
     732:	8f 91       	pop	r24
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	1f 90       	pop	r1
     73c:	18 95       	reti

0000073e <__vector_19>:

// Overflow interrupt
// Currently (22/9) set at a 30Hz interrupt rate. With battery_check_counter threshold at 30,
// the battery level will be read approx. every 1 second.
ISR(TIMER0_COMP_vect) {
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	2f 93       	push	r18
     74a:	3f 93       	push	r19
     74c:	4f 93       	push	r20
     74e:	5f 93       	push	r21
     750:	6f 93       	push	r22
     752:	7f 93       	push	r23
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	af 93       	push	r26
     75a:	bf 93       	push	r27
     75c:	ef 93       	push	r30
     75e:	ff 93       	push	r31
	static volatile uint16_t battery_check_counter = 0;
	
	// Depending on calling frequency, change threshold for level check freq.
	if(battery_check_counter > BATTERY_CHECK_COUNT) {
     760:	80 91 c2 00 	lds	r24, 0x00C2
     764:	90 91 c3 00 	lds	r25, 0x00C3
     768:	85 3f       	cpi	r24, 0xF5	; 245
     76a:	91 40       	sbci	r25, 0x01	; 1
     76c:	30 f0       	brcs	.+12     	; 0x77a <__vector_19+0x3c>
		check_battery_level();
     76e:	0e 94 4f 03 	call	0x69e	; 0x69e <check_battery_level>
		battery_check_counter = 0;
     772:	10 92 c3 00 	sts	0x00C3, r1
     776:	10 92 c2 00 	sts	0x00C2, r1
	}
	battery_check_counter++;
     77a:	80 91 c2 00 	lds	r24, 0x00C2
     77e:	90 91 c3 00 	lds	r25, 0x00C3
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	90 93 c3 00 	sts	0x00C3, r25
     788:	80 93 c2 00 	sts	0x00C2, r24
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	0f 90       	pop	r0
     7aa:	1f 90       	pop	r1
     7ac:	18 95       	reti

000007ae <draw_square.constprop.3>:
	buffer_set_bit(x + 1, y + 2, buffer_num);
	buffer_set_bit(x, y + 1, buffer_num);
}

// Draw still life sqaure
static void draw_square(uint8_t x, uint8_t y, uint8_t buffer_num) {
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	c8 2f       	mov	r28, r24
     7b6:	d6 2f       	mov	r29, r22
	buffer_set_bit(x, y, buffer_num);
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 1, y, buffer_num);
     7be:	11 e0       	ldi	r17, 0x01	; 1
     7c0:	1c 0f       	add	r17, r28
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	6d 2f       	mov	r22, r29
     7c6:	81 2f       	mov	r24, r17
     7c8:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x, y + 1, buffer_num);
     7cc:	df 5f       	subi	r29, 0xFF	; 255
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	6d 2f       	mov	r22, r29
     7d2:	8c 2f       	mov	r24, r28
     7d4:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 1, y + 1, buffer_num);	
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	6d 2f       	mov	r22, r29
     7dc:	81 2f       	mov	r24, r17
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
// Draw still life sqaure
static void draw_square(uint8_t x, uint8_t y, uint8_t buffer_num) {
	buffer_set_bit(x, y, buffer_num);
	buffer_set_bit(x + 1, y, buffer_num);
	buffer_set_bit(x, y + 1, buffer_num);
	buffer_set_bit(x + 1, y + 1, buffer_num);	
     7e4:	0c 94 dd 07 	jmp	0xfba	; 0xfba <buffer_set_bit>

000007e8 <draw_toad.constprop.4>:
	draw_square(x, y, buffer_num);
	draw_square(x + 2, y + 2, buffer_num);
}

// Period 2 oscillator
static void draw_toad(uint8_t x, uint8_t y, uint8_t buffer_num) {
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	c8 2f       	mov	r28, r24
	buffer_set_bit(x + 1, y, buffer_num);
     7f0:	11 e0       	ldi	r17, 0x01	; 1
     7f2:	18 0f       	add	r17, r24
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	68 e2       	ldi	r22, 0x28	; 40
     7f8:	81 2f       	mov	r24, r17
     7fa:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 2, y, buffer_num);
     7fe:	d2 e0       	ldi	r29, 0x02	; 2
     800:	dc 0f       	add	r29, r28
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	68 e2       	ldi	r22, 0x28	; 40
     806:	8d 2f       	mov	r24, r29
     808:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 3, y, buffer_num);
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	68 e2       	ldi	r22, 0x28	; 40
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	8c 0f       	add	r24, r28
     814:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	
	buffer_set_bit(x, y + 1, buffer_num);
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	69 e2       	ldi	r22, 0x29	; 41
     81c:	8c 2f       	mov	r24, r28
     81e:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 1, y + 1, buffer_num);
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	69 e2       	ldi	r22, 0x29	; 41
     826:	81 2f       	mov	r24, r17
     828:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 2, y + 1, buffer_num);
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	69 e2       	ldi	r22, 0x29	; 41
     830:	8d 2f       	mov	r24, r29
}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
	buffer_set_bit(x + 2, y, buffer_num);
	buffer_set_bit(x + 3, y, buffer_num);
	
	buffer_set_bit(x, y + 1, buffer_num);
	buffer_set_bit(x + 1, y + 1, buffer_num);
	buffer_set_bit(x + 2, y + 1, buffer_num);
     838:	0c 94 dd 07 	jmp	0xfba	; 0xfba <buffer_set_bit>

0000083c <life>:
static void draw_square(uint8_t x, uint8_t y, uint8_t buffer_num);
static void draw_r_pentomino(uint8_t x, uint8_t y, uint8_t buffer_num); // unstable for >500 generations
static void draw_spark(uint8_t x, uint8_t y, uint8_t buffer_num);
//static void draw_gosper_gun(uint8_t x, uint8_t y, uint8_t buffer_num); // incomplete pattern

void life() {	
     83c:	2f 92       	push	r2
     83e:	3f 92       	push	r3
     840:	4f 92       	push	r4
     842:	5f 92       	push	r5
     844:	6f 92       	push	r6
     846:	7f 92       	push	r7
     848:	8f 92       	push	r8
     84a:	9f 92       	push	r9
     84c:	af 92       	push	r10
     84e:	bf 92       	push	r11
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	28 97       	sbiw	r28, 0x08	; 8
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
	uint8_t current_frame = FRAME0;
	uint8_t next_frame = FRAME1;
	
	uint32_t generation = 0; // keep track of iterations

	buffer_clear(current_frame);
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	0e 94 c0 07 	call	0xf80	; 0xf80 <buffer_clear>
	buffer_clear(next_frame);
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	0e 94 c0 07 	call	0xf80	; 0xf80 <buffer_clear>
}
}*/

// Period 5 oscillator
static void draw_spark(uint8_t x, uint8_t y, uint8_t buffer_num) {
	buffer_set_bit(x+3, y, buffer_num);
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	62 e1       	ldi	r22, 0x12	; 18
     880:	84 e0       	ldi	r24, 0x04	; 4
     882:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+4, y, buffer_num);
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	62 e1       	ldi	r22, 0x12	; 18
     88a:	85 e0       	ldi	r24, 0x05	; 5
     88c:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+1, y+1, buffer_num);
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	63 e1       	ldi	r22, 0x13	; 19
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+6, y+1, buffer_num);
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	63 e1       	ldi	r22, 0x13	; 19
     89e:	87 e0       	ldi	r24, 0x07	; 7
     8a0:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+1, y+2, buffer_num);
     8a4:	40 e0       	ldi	r20, 0x00	; 0
     8a6:	64 e1       	ldi	r22, 0x14	; 20
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+6, y+2, buffer_num);
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	64 e1       	ldi	r22, 0x14	; 20
     8b2:	87 e0       	ldi	r24, 0x07	; 7
     8b4:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+1, y+3, buffer_num);
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	65 e1       	ldi	r22, 0x15	; 21
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+6, y+3, buffer_num);
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	65 e1       	ldi	r22, 0x15	; 21
     8c6:	87 e0       	ldi	r24, 0x07	; 7
     8c8:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+2, y+4, buffer_num);
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	66 e1       	ldi	r22, 0x16	; 22
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+5, y+4, buffer_num);
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	66 e1       	ldi	r22, 0x16	; 22
     8da:	86 e0       	ldi	r24, 0x06	; 6
     8dc:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x, y+5, buffer_num);
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	67 e1       	ldi	r22, 0x17	; 23
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+2, y+5, buffer_num);
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	67 e1       	ldi	r22, 0x17	; 23
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+5, y+5, buffer_num);
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	67 e1       	ldi	r22, 0x17	; 23
     8f8:	86 e0       	ldi	r24, 0x06	; 6
     8fa:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+7, y+5, buffer_num);
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	67 e1       	ldi	r22, 0x17	; 23
     902:	88 e0       	ldi	r24, 0x08	; 8
     904:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x, y+6, buffer_num);
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	68 e1       	ldi	r22, 0x18	; 24
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+1, y+6, buffer_num);
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	68 e1       	ldi	r22, 0x18	; 24
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+6, y+6, buffer_num);
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	68 e1       	ldi	r22, 0x18	; 24
     920:	87 e0       	ldi	r24, 0x07	; 7
     922:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x+7, y+6, buffer_num);	
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	68 e1       	ldi	r22, 0x18	; 24
     92a:	88 e0       	ldi	r24, 0x08	; 8
     92c:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 2, y + 1, buffer_num);
}

// Lightweight spaceship (moves left to right)
static void draw_lwss(uint8_t x, uint8_t y, uint8_t buffer_num) {
	buffer_set_bit(x, y, buffer_num);
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	6e e1       	ldi	r22, 0x1E	; 30
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 3, y, buffer_num);
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	6e e1       	ldi	r22, 0x1E	; 30
     93e:	84 e0       	ldi	r24, 0x04	; 4
     940:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 4, y + 1, buffer_num);
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	6f e1       	ldi	r22, 0x1F	; 31
     948:	85 e0       	ldi	r24, 0x05	; 5
     94a:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x, y + 2, buffer_num);
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	60 e2       	ldi	r22, 0x20	; 32
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 4, y + 2, buffer_num);
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	60 e2       	ldi	r22, 0x20	; 32
     95c:	85 e0       	ldi	r24, 0x05	; 5
     95e:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 1, y + 3, buffer_num);
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	61 e2       	ldi	r22, 0x21	; 33
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 2, y + 3, buffer_num);
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	61 e2       	ldi	r22, 0x21	; 33
     970:	83 e0       	ldi	r24, 0x03	; 3
     972:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 3, y + 3, buffer_num);
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	61 e2       	ldi	r22, 0x21	; 33
     97a:	84 e0       	ldi	r24, 0x04	; 4
     97c:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 4, y + 3, buffer_num);
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	61 e2       	ldi	r22, 0x21	; 33
     984:	85 e0       	ldi	r24, 0x05	; 5
     986:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>

//----- PATTERNS -----//

// Period 2 oscillator
static void draw_beacon(uint8_t x, uint8_t y, uint8_t buffer_num) {
	draw_square(x, y, buffer_num);
     98a:	64 e1       	ldi	r22, 0x14	; 20
     98c:	84 e1       	ldi	r24, 0x14	; 20
     98e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <draw_square.constprop.3>
	draw_square(x + 2, y + 2, buffer_num);
     992:	66 e1       	ldi	r22, 0x16	; 22
     994:	86 e1       	ldi	r24, 0x16	; 22
     996:	0e 94 d7 03 	call	0x7ae	; 0x7ae <draw_square.constprop.3>
	
	// Draw start patterns
	draw_spark(1, 18, current_frame);
	draw_lwss(1, 30, current_frame);
	draw_beacon(20, 20, current_frame);
	draw_toad(5, 40, current_frame);
     99a:	85 e0       	ldi	r24, 0x05	; 5
     99c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <draw_toad.constprop.4>
	draw_toad(10, 40, current_frame);
     9a0:	8a e0       	ldi	r24, 0x0A	; 10
     9a2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <draw_toad.constprop.4>
	draw_toad(15, 40, current_frame);
     9a6:	8f e0       	ldi	r24, 0x0F	; 15
     9a8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <draw_toad.constprop.4>
	buffer_set_bit(x + 1, y + 1, buffer_num);	
}

// Unstable group of cells
static void draw_r_pentomino(uint8_t x, uint8_t y, uint8_t buffer_num) {
	buffer_set_bit(x + 1, y, buffer_num);
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	62 e3       	ldi	r22, 0x32	; 50
     9b0:	8b e0       	ldi	r24, 0x0B	; 11
     9b2:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 2, y, buffer_num);
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	62 e3       	ldi	r22, 0x32	; 50
     9ba:	8c e0       	ldi	r24, 0x0C	; 12
     9bc:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x, y + 1, buffer_num);
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	63 e3       	ldi	r22, 0x33	; 51
     9c4:	8a e0       	ldi	r24, 0x0A	; 10
     9c6:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 1, y + 1, buffer_num);
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	63 e3       	ldi	r22, 0x33	; 51
     9ce:	8b e0       	ldi	r24, 0x0B	; 11
     9d0:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 1, y + 2, buffer_num);
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	64 e3       	ldi	r22, 0x34	; 52
     9d8:	8b e0       	ldi	r24, 0x0B	; 11
     9da:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	draw_toad(15, 40, current_frame);
	draw_r_pentomino(10, 50, current_frame);
	
	// Array of gliders
	uint8_t i, j;
	for(i = 35; i < 80; i+=4) {
     9de:	93 e2       	ldi	r25, 0x23	; 35
static void draw_square(uint8_t x, uint8_t y, uint8_t buffer_num);
static void draw_r_pentomino(uint8_t x, uint8_t y, uint8_t buffer_num); // unstable for >500 generations
static void draw_spark(uint8_t x, uint8_t y, uint8_t buffer_num);
//static void draw_gosper_gun(uint8_t x, uint8_t y, uint8_t buffer_num); // incomplete pattern

void life() {	
     9e0:	d1 2c       	mov	r13, r1
     9e2:	12 e0       	ldi	r17, 0x02	; 2
     9e4:	19 0f       	add	r17, r25
     9e6:	ee 24       	eor	r14, r14
     9e8:	e3 94       	inc	r14
     9ea:	e9 0e       	add	r14, r25
	buffer_set_bit(x + 4, y + 3, buffer_num);
}

// Simple spaceship (moves down to the right)
static void draw_glider(uint8_t x, uint8_t y, uint8_t buffer_num) {
	buffer_set_bit(x + 2, y, buffer_num);
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	6d 2d       	mov	r22, r13
     9f0:	81 2f       	mov	r24, r17
     9f2:	9b 83       	std	Y+3, r25	; 0x03
     9f4:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
     9f8:	01 e0       	ldi	r16, 0x01	; 1
     9fa:	0d 0d       	add	r16, r13
	buffer_set_bit(x + 2, y + 1, buffer_num);
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	60 2f       	mov	r22, r16
     a00:	81 2f       	mov	r24, r17
     a02:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	f8 2e       	mov	r15, r24
     a0a:	fd 0c       	add	r15, r13
	buffer_set_bit(x + 2, y + 2, buffer_num);
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	6f 2d       	mov	r22, r15
     a10:	81 2f       	mov	r24, r17
     a12:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 1, y + 2, buffer_num);
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	6f 2d       	mov	r22, r15
     a1a:	8e 2d       	mov	r24, r14
     a1c:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x, y + 1, buffer_num);
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	60 2f       	mov	r22, r16
     a24:	9b 81       	ldd	r25, Y+3	; 0x03
     a26:	89 2f       	mov	r24, r25
     a28:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	draw_r_pentomino(10, 50, current_frame);
	
	// Array of gliders
	uint8_t i, j;
	for(i = 35; i < 80; i+=4) {
		for(j = 0; j < 50; j+=4) {
     a2c:	84 e0       	ldi	r24, 0x04	; 4
     a2e:	d8 0e       	add	r13, r24
     a30:	9b 81       	ldd	r25, Y+3	; 0x03
     a32:	e4 e3       	ldi	r30, 0x34	; 52
     a34:	de 12       	cpse	r13, r30
     a36:	da cf       	rjmp	.-76     	; 0x9ec <life+0x1b0>
	draw_toad(15, 40, current_frame);
	draw_r_pentomino(10, 50, current_frame);
	
	// Array of gliders
	uint8_t i, j;
	for(i = 35; i < 80; i+=4) {
     a38:	9c 5f       	subi	r25, 0xFC	; 252
     a3a:	93 35       	cpi	r25, 0x53	; 83
     a3c:	89 f6       	brne	.-94     	; 0x9e0 <life+0x1a4>
     a3e:	81 2c       	mov	r8, r1
     a40:	91 2c       	mov	r9, r1
     a42:	54 01       	movw	r10, r8
     a44:	33 24       	eor	r3, r3
     a46:	33 94       	inc	r3
     a48:	f1 2c       	mov	r15, r1
	}
	
	
	while(1) {
		// Check if the user wants to quit
		if(BUTTON_A2) {
     a4a:	81 9b       	sbis	0x10, 1	; 16
     a4c:	8f c0       	rjmp	.+286    	; 0xb6c <life+0x330>
	} // END WHILE()
}

// Draw  the number of generations that have been simulated
static void  draw_generation_number(uint32_t generation, uint8_t buffer) {	
	draw_string(0, PAGE_0, generation_string, GENERATION_STRING_LENGTH, buffer);
     a4e:	0f 2d       	mov	r16, r15
     a50:	2c e0       	ldi	r18, 0x0C	; 12
     a52:	45 e6       	ldi	r20, 0x65	; 101
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	0e 94 57 06 	call	0xcae	; 0xcae <draw_string>
	draw_number((GENERATION_STRING_LENGTH-1)*CHARACTER_WIDTH, 0, generation, GENERATION_NUMBER_OF_DIGITS, buffer);
     a5e:	ef 2c       	mov	r14, r15
     a60:	04 e0       	ldi	r16, 0x04	; 4
     a62:	a5 01       	movw	r20, r10
     a64:	94 01       	movw	r18, r8
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	82 e4       	ldi	r24, 0x42	; 66
     a6a:	0e 94 a0 06 	call	0xd40	; 0xd40 <draw_number>
		if(BUTTON_A2) {
			break;
		}
		
		draw_generation_number(generation, current_frame);
		send_buffer_all(current_frame);
     a6e:	8f 2d       	mov	r24, r15
     a70:	0e 94 db 08 	call	0x11b6	; 0x11b6 <send_buffer_all>
     a74:	c1 2c       	mov	r12, r1
     a76:	d1 2c       	mov	r13, r1
     a78:	ec 2c       	mov	r14, r12
		} // END FOR()
		
		// Update frames for next iteration
		uint8_t temp_frame = current_frame;
		current_frame = next_frame;
		next_frame = temp_frame;
     a7a:	e8 e0       	ldi	r30, 0x08	; 8
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	f8 87       	std	Y+8, r31	; 0x08
     a80:	ef 83       	std	Y+7, r30	; 0x07
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	9c 0d       	add	r25, r12
     a86:	9a 83       	std	Y+2, r25	; 0x02
     a88:	36 01       	movw	r6, r12
     a8a:	ef ef       	ldi	r30, 0xFF	; 255
     a8c:	6e 1a       	sub	r6, r30
     a8e:	7e 0a       	sbc	r7, r30
     a90:	2f 80       	ldd	r2, Y+7	; 0x07
	}
}

/* Returns the state of the cell at position (x, y) */
static uint8_t get_cell_state(uint8_t x, uint8_t y, uint8_t buffer) {
	if(is_alive(buffer_get_bit(x, y, buffer))) {
     a92:	4f 2d       	mov	r20, r15
     a94:	62 2d       	mov	r22, r2
     a96:	8e 2d       	mov	r24, r14
     a98:	0e 94 0e 08 	call	0x101c	; 0x101c <buffer_get_bit>
     a9c:	78 2f       	mov	r23, r24
     a9e:	2a 81       	ldd	r18, Y+2	; 0x02
 * 
 * \return uint8_t number of neighbours
 */
static uint8_t neighbours(uint8_t cell_x, uint8_t cell_y, uint8_t buffer)
{
	uint8_t num_neighbours = 0; // number of neighbours
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	0f 81       	ldd	r16, Y+7	; 0x07
     aa4:	18 85       	ldd	r17, Y+8	; 0x08
     aa6:	0f 5f       	subi	r16, 0xFF	; 255
     aa8:	1f 4f       	sbci	r17, 0xFF	; 255
     aaa:	9f ef       	ldi	r25, 0xFF	; 255
     aac:	92 0d       	add	r25, r2
     aae:	99 83       	std	Y+1, r25	; 0x01
	int8_t x, y;
	
	for(x = cell_x-1; x <= cell_x+1; x++) {
     ab0:	42 2e       	mov	r4, r18
     ab2:	55 24       	eor	r5, r5
     ab4:	47 fc       	sbrc	r4, 7
     ab6:	50 94       	com	r5
     ab8:	64 14       	cp	r6, r4
     aba:	75 04       	cpc	r7, r5
     abc:	6c f1       	brlt	.+90     	; 0xb18 <life+0x2dc>
     abe:	39 81       	ldd	r19, Y+1	; 0x01
		for(y = cell_y-1; y <= cell_y+1; y++) {
     ac0:	e3 2f       	mov	r30, r19
     ac2:	ff 27       	eor	r31, r31
     ac4:	e7 fd       	sbrc	r30, 7
     ac6:	f0 95       	com	r31
     ac8:	0e 17       	cp	r16, r30
     aca:	1f 07       	cpc	r17, r31
     acc:	1c f1       	brlt	.+70     	; 0xb14 <life+0x2d8>
			if(x == cell_x && y == cell_y) continue; // don't include the central cell
     ace:	4c 14       	cp	r4, r12
     ad0:	5d 04       	cpc	r5, r13
     ad2:	29 f4       	brne	.+10     	; 0xade <life+0x2a2>
     ad4:	8f 81       	ldd	r24, Y+7	; 0x07
     ad6:	98 85       	ldd	r25, Y+8	; 0x08
     ad8:	e8 17       	cp	r30, r24
     ada:	f9 07       	cpc	r31, r25
     adc:	c9 f0       	breq	.+50     	; 0xb10 <life+0x2d4>
}

/* Returns TRUE if the given coordinate is a valid coordinate
 * on the game board */
static uint8_t in_bounds(int8_t x, int8_t y) {
	return ((x >= 0 && x < SCREEN_WIDTH) && (y >= 0 && y < SCREEN_HEIGHT));
     ade:	26 36       	cpi	r18, 0x66	; 102
     ae0:	b8 f4       	brcc	.+46     	; 0xb10 <life+0x2d4>
     ae2:	e1 e0       	ldi	r30, 0x01	; 1
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	30 34       	cpi	r19, 0x40	; 64
     ae8:	10 f0       	brcs	.+4      	; 0xaee <life+0x2b2>
     aea:	e0 e0       	ldi	r30, 0x00	; 0
     aec:	f0 e0       	ldi	r31, 0x00	; 0
	int8_t x, y;
	
	for(x = cell_x-1; x <= cell_x+1; x++) {
		for(y = cell_y-1; y <= cell_y+1; y++) {
			if(x == cell_x && y == cell_y) continue; // don't include the central cell
			if(in_bounds(x, y) && get_cell_state(x, y, buffer) == ALIVE)	 {
     aee:	ef 2b       	or	r30, r31
     af0:	79 f0       	breq	.+30     	; 0xb10 <life+0x2d4>
	}
}

/* Returns the state of the cell at position (x, y) */
static uint8_t get_cell_state(uint8_t x, uint8_t y, uint8_t buffer) {
	if(is_alive(buffer_get_bit(x, y, buffer))) {
     af2:	4f 2d       	mov	r20, r15
     af4:	63 2f       	mov	r22, r19
     af6:	82 2f       	mov	r24, r18
     af8:	2c 83       	std	Y+4, r18	; 0x04
     afa:	3d 83       	std	Y+5, r19	; 0x05
     afc:	5e 83       	std	Y+6, r21	; 0x06
     afe:	7b 83       	std	Y+3, r23	; 0x03
     b00:	0e 94 0e 08 	call	0x101c	; 0x101c <buffer_get_bit>
	}
}

/* Returns TRUE if the cell is alive, otherwise FALSE */
static uint8_t is_alive(uint8_t cell_value) {
	if(cell_value == ALIVE) { 
     b04:	2c 81       	ldd	r18, Y+4	; 0x04
     b06:	3d 81       	ldd	r19, Y+5	; 0x05
     b08:	5e 81       	ldd	r21, Y+6	; 0x06
     b0a:	7b 81       	ldd	r23, Y+3	; 0x03
     b0c:	81 30       	cpi	r24, 0x01	; 1
     b0e:	61 f1       	breq	.+88     	; 0xb68 <life+0x32c>
     b10:	3f 5f       	subi	r19, 0xFF	; 255
     b12:	d6 cf       	rjmp	.-84     	; 0xac0 <life+0x284>
     b14:	2f 5f       	subi	r18, 0xFF	; 255
     b16:	cc cf       	rjmp	.-104    	; 0xab0 <life+0x274>
			for (y = GEN_STRING_HEIGHT; y < SCREEN_HEIGHT; y++) {
				current_cell_state = get_cell_state(x, y, current_frame);
				number_neighbours = neighbours(x, y, current_frame);
				
				// Decide what state the current cell will have in the next frame
				if(current_cell_state == DEAD) {
     b18:	71 30       	cpi	r23, 0x01	; 1
     b1a:	31 f0       	breq	.+12     	; 0xb28 <life+0x2ec>
}

/* Sets the cell value at (x, y) to 'state' in the buffer stored in FRAM. */
static void set_cell_state(uint8_t x, uint8_t y, uint8_t state, uint8_t buffer) {
	if(state == ALIVE) {
		buffer_set_bit(x, y, buffer);	
     b1c:	43 2d       	mov	r20, r3
     b1e:	62 2d       	mov	r22, r2
     b20:	8e 2d       	mov	r24, r14
				current_cell_state = get_cell_state(x, y, current_frame);
				number_neighbours = neighbours(x, y, current_frame);
				
				// Decide what state the current cell will have in the next frame
				if(current_cell_state == DEAD) {
					if(number_neighbours == CELL_REPRODUCTION) {
     b22:	53 30       	cpi	r21, 0x03	; 3
     b24:	39 f4       	brne	.+14     	; 0xb34 <life+0x2f8>
     b26:	09 c0       	rjmp	.+18     	; 0xb3a <life+0x2fe>
					} else {
						set_cell_state(x, y, DEAD, next_frame);
					}
				} else { // else if state == ALIVE
					// death by under population or overcrowding
					if(number_neighbours < CELL_UNDERPOPULATION || number_neighbours > CELL_OVERPOPULATION) {
     b28:	52 50       	subi	r21, 0x02	; 2
/* Sets the cell value at (x, y) to 'state' in the buffer stored in FRAM. */
static void set_cell_state(uint8_t x, uint8_t y, uint8_t state, uint8_t buffer) {
	if(state == ALIVE) {
		buffer_set_bit(x, y, buffer);	
	} else {
		buffer_clear_bit(x, y, buffer);
     b2a:	43 2d       	mov	r20, r3
     b2c:	62 2d       	mov	r22, r2
     b2e:	8e 2d       	mov	r24, r14
					} else {
						set_cell_state(x, y, DEAD, next_frame);
					}
				} else { // else if state == ALIVE
					// death by under population or overcrowding
					if(number_neighbours < CELL_UNDERPOPULATION || number_neighbours > CELL_OVERPOPULATION) {
     b30:	52 30       	cpi	r21, 0x02	; 2
     b32:	18 f0       	brcs	.+6      	; 0xb3a <life+0x2fe>
/* Sets the cell value at (x, y) to 'state' in the buffer stored in FRAM. */
static void set_cell_state(uint8_t x, uint8_t y, uint8_t state, uint8_t buffer) {
	if(state == ALIVE) {
		buffer_set_bit(x, y, buffer);	
	} else {
		buffer_clear_bit(x, y, buffer);
     b34:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <life+0x302>
}

/* Sets the cell value at (x, y) to 'state' in the buffer stored in FRAM. */
static void set_cell_state(uint8_t x, uint8_t y, uint8_t state, uint8_t buffer) {
	if(state == ALIVE) {
		buffer_set_bit(x, y, buffer);	
     b3a:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
     b3e:	18 87       	std	Y+8, r17	; 0x08
     b40:	0f 83       	std	Y+7, r16	; 0x07
		// For each cell, check how many neighbours it has, and
		// use that to find its state in the next frame.
		uint8_t x, y, number_neighbours;
		
		for (x = 0; x < SCREEN_WIDTH; x++) {
			for (y = GEN_STRING_HEIGHT; y < SCREEN_HEIGHT; y++) {
     b42:	00 34       	cpi	r16, 0x40	; 64
     b44:	11 05       	cpc	r17, r1
     b46:	09 f0       	breq	.+2      	; 0xb4a <life+0x30e>
     b48:	a3 cf       	rjmp	.-186    	; 0xa90 <life+0x254>
		
		// For each cell, check how many neighbours it has, and
		// use that to find its state in the next frame.
		uint8_t x, y, number_neighbours;
		
		for (x = 0; x < SCREEN_WIDTH; x++) {
     b4a:	96 e6       	ldi	r25, 0x66	; 102
     b4c:	69 16       	cp	r6, r25
     b4e:	71 04       	cpc	r7, r1
     b50:	11 f0       	breq	.+4      	; 0xb56 <life+0x31a>
     b52:	63 01       	movw	r12, r6
     b54:	91 cf       	rjmp	.-222    	; 0xa78 <life+0x23c>
		// Update frames for next iteration
		uint8_t temp_frame = current_frame;
		current_frame = next_frame;
		next_frame = temp_frame;
		
		generation++;		
     b56:	ff ef       	ldi	r31, 0xFF	; 255
     b58:	8f 1a       	sub	r8, r31
     b5a:	9f 0a       	sbc	r9, r31
     b5c:	af 0a       	sbc	r10, r31
     b5e:	bf 0a       	sbc	r11, r31

	} // END WHILE()
     b60:	8f 2d       	mov	r24, r15
			}
		} // END FOR()
		
		// Update frames for next iteration
		uint8_t temp_frame = current_frame;
		current_frame = next_frame;
     b62:	f3 2c       	mov	r15, r3
		next_frame = temp_frame;
     b64:	38 2e       	mov	r3, r24
		
		generation++;		

	} // END WHILE()
     b66:	71 cf       	rjmp	.-286    	; 0xa4a <life+0x20e>
	
	for(x = cell_x-1; x <= cell_x+1; x++) {
		for(y = cell_y-1; y <= cell_y+1; y++) {
			if(x == cell_x && y == cell_y) continue; // don't include the central cell
			if(in_bounds(x, y) && get_cell_state(x, y, buffer) == ALIVE)	 {
				num_neighbours++;
     b68:	5f 5f       	subi	r21, 0xFF	; 255
     b6a:	d2 cf       	rjmp	.-92     	; 0xb10 <life+0x2d4>
		next_frame = temp_frame;
		
		generation++;		

	} // END WHILE()
}
     b6c:	28 96       	adiw	r28, 0x08	; 8
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	bf 90       	pop	r11
     b8a:	af 90       	pop	r10
     b8c:	9f 90       	pop	r9
     b8e:	8f 90       	pop	r8
     b90:	7f 90       	pop	r7
     b92:	6f 90       	pop	r6
     b94:	5f 90       	pop	r5
     b96:	4f 90       	pop	r4
     b98:	3f 90       	pop	r3
     b9a:	2f 90       	pop	r2
     b9c:	08 95       	ret

00000b9e <get_touch_coordinates_pots>:

/* For demonstrating the use of variable resistors as an input method.
 * This modifies variables x and y according to analog inputs.
 * It applies correct scaling to map the 
 * analog readings [0, 1023] to screen position [0, 101] and [0, 63] */
void get_touch_coordinates_pots(uint8_t *x, uint8_t *y) {
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	8c 01       	movw	r16, r24
     ba8:	eb 01       	movw	r28, r22
	//---- X Coordinate ----//
	*x = adc_read_channel(TOUCH_B) / X_MAP_VALUE;
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <adc_read_channel>
     bb0:	6a e0       	ldi	r22, 0x0A	; 10
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__udivmodhi4>
     bb8:	f8 01       	movw	r30, r16
     bba:	60 83       	st	Z, r22

	//---- Y Coordinate ----//
	*y = adc_read_channel(TOUCH_R) / Y_MAP_VALUE;
     bbc:	87 e0       	ldi	r24, 0x07	; 7
     bbe:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <adc_read_channel>
     bc2:	34 e0       	ldi	r19, 0x04	; 4
     bc4:	96 95       	lsr	r25
     bc6:	87 95       	ror	r24
     bc8:	3a 95       	dec	r19
     bca:	e1 f7       	brne	.-8      	; 0xbc4 <get_touch_coordinates_pots+0x26>
     bcc:	88 83       	st	Y, r24
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	08 95       	ret

00000bd8 <adc_init>:
/* Initialises analog input pins and the ADC control registers
 * Current setup is for  
 * 64 prescaler
 * 3.3V VCC reference */
void adc_init() {		
		DDRA &= ~(TOUCH_PINS_MASK); // All inputs as default
     bd8:	8a b3       	in	r24, 0x1a	; 26
     bda:	8f 70       	andi	r24, 0x0F	; 15
     bdc:	8a bb       	out	0x1a, r24	; 26
		
		// ADC setup
		ADMUX |= ADMUX_SETUP;
     bde:	3e 9a       	sbi	0x07, 6	; 7
		ADCSRA |= ADCSRA_SETUP;
     be0:	86 b1       	in	r24, 0x06	; 6
     be2:	86 68       	ori	r24, 0x86	; 134
     be4:	86 b9       	out	0x06, r24	; 6
     be6:	08 95       	ret

00000be8 <adc_read_channel>:
	appropriate MUX4:0 bits in the ADMUX register. */
uint16_t adc_read_channel(uint8_t channel) {
		uint16_t ADC_result;
		
		// Change input channel
		ADMUX = ADMUX_SETUP | channel;
     be8:	80 64       	ori	r24, 0x40	; 64
     bea:	87 b9       	out	0x07, r24	; 7
		
		// Start conversion
		ADCSRA |= _BV(ADSC);
     bec:	36 9a       	sbi	0x06, 6	; 6
		
		// Wait for conversion to finish
		while(_BV(ADSC) & ADCSRA);
     bee:	36 99       	sbic	0x06, 6	; 6
     bf0:	fe cf       	rjmp	.-4      	; 0xbee <adc_read_channel+0x6>
				
		// Get results (10 bit resolution because we can)
		ADC_result = ADCL | (ADCH<<8);
     bf2:	84 b1       	in	r24, 0x04	; 4
     bf4:	25 b1       	in	r18, 0x05	; 5
     bf6:	90 e0       	ldi	r25, 0x00	; 0
		
		return ADC_result;
     bf8:	92 2b       	or	r25, r18
     bfa:	08 95       	ret

00000bfc <buttons_init>:
#include <stdint.h>
#include "buttons.h"

// Configure button input port and pullup resistors
void buttons_init() {
	BUTTON_DIR_PORT &= ~(BUTTON_PINS_MASK); // All input pins except PIND2, which is the button interrupt input
     bfc:	81 b3       	in	r24, 0x11	; 17
     bfe:	84 70       	andi	r24, 0x04	; 4
     c00:	81 bb       	out	0x11, r24	; 17
	BUTTON_OUTPUT_PORT |= BUTTON_PINS_MASK; // Enable pullup resistors on all button pins
     c02:	82 b3       	in	r24, 0x12	; 18
     c04:	8b 6f       	ori	r24, 0xFB	; 251
     c06:	82 bb       	out	0x12, r24	; 18
     c08:	08 95       	ret

00000c0a <clear_square.constprop.1>:
	buffer_set_bit(x + 1, y, buffer_num);
	buffer_set_bit(x, y + 1, buffer_num);
	buffer_set_bit(x + 1, y + 1, buffer_num);
}

static void clear_square(uint8_t x, uint8_t y, uint8_t buffer_num) {
     c0a:	1f 93       	push	r17
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	c8 2f       	mov	r28, r24
     c12:	d6 2f       	mov	r29, r22
	buffer_clear_bit(x, y, buffer_num);
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
	buffer_clear_bit(x + 1, y, buffer_num);
     c1a:	11 e0       	ldi	r17, 0x01	; 1
     c1c:	1c 0f       	add	r17, r28
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	6d 2f       	mov	r22, r29
     c22:	81 2f       	mov	r24, r17
     c24:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
	buffer_clear_bit(x, y + 1, buffer_num);
     c28:	df 5f       	subi	r29, 0xFF	; 255
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	6d 2f       	mov	r22, r29
     c2e:	8c 2f       	mov	r24, r28
     c30:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
	buffer_clear_bit(x + 1, y + 1, buffer_num);
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	6d 2f       	mov	r22, r29
     c38:	81 2f       	mov	r24, r17
}
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17

static void clear_square(uint8_t x, uint8_t y, uint8_t buffer_num) {
	buffer_clear_bit(x, y, buffer_num);
	buffer_clear_bit(x + 1, y, buffer_num);
	buffer_clear_bit(x, y + 1, buffer_num);
	buffer_clear_bit(x + 1, y + 1, buffer_num);
     c40:	0c 94 36 08 	jmp	0x106c	; 0x106c <buffer_clear_bit>

00000c44 <draw_square.constprop.3>:
	draw_square(x + 2, y+1, buffer_num);
	draw_square(x, y + 3, buffer_num);
	draw_square(x + 2, y + 3, buffer_num);
}

static void draw_square(uint8_t x, uint8_t y, uint8_t buffer_num) {
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	c8 2f       	mov	r28, r24
     c4c:	d6 2f       	mov	r29, r22
	buffer_set_bit(x, y, buffer_num);
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 1, y, buffer_num);
     c54:	11 e0       	ldi	r17, 0x01	; 1
     c56:	1c 0f       	add	r17, r28
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	6d 2f       	mov	r22, r29
     c5c:	81 2f       	mov	r24, r17
     c5e:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x, y + 1, buffer_num);
     c62:	df 5f       	subi	r29, 0xFF	; 255
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	6d 2f       	mov	r22, r29
     c68:	8c 2f       	mov	r24, r28
     c6a:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(x + 1, y + 1, buffer_num);
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	6d 2f       	mov	r22, r29
     c72:	81 2f       	mov	r24, r17
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17

static void draw_square(uint8_t x, uint8_t y, uint8_t buffer_num) {
	buffer_set_bit(x, y, buffer_num);
	buffer_set_bit(x + 1, y, buffer_num);
	buffer_set_bit(x, y + 1, buffer_num);
	buffer_set_bit(x + 1, y + 1, buffer_num);
     c7a:	0c 94 dd 07 	jmp	0xfba	; 0xfba <buffer_set_bit>

00000c7e <draw4x4_square.constprop.2>:
	return menu_item;
}

/*----- MENU SELECT FUNCTIONS -----*/

static void draw4x4_square(uint8_t x, uint8_t y, uint8_t buffer_num) {
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	c8 2f       	mov	r28, r24
	draw_square(x, y+1, buffer_num);
     c84:	d1 e0       	ldi	r29, 0x01	; 1
     c86:	d8 0f       	add	r29, r24
     c88:	6d 2f       	mov	r22, r29
     c8a:	8a e0       	ldi	r24, 0x0A	; 10
     c8c:	0e 94 22 06 	call	0xc44	; 0xc44 <draw_square.constprop.3>
	draw_square(x + 2, y+1, buffer_num);
     c90:	6d 2f       	mov	r22, r29
     c92:	8c e0       	ldi	r24, 0x0C	; 12
     c94:	0e 94 22 06 	call	0xc44	; 0xc44 <draw_square.constprop.3>
	draw_square(x, y + 3, buffer_num);
     c98:	cd 5f       	subi	r28, 0xFD	; 253
     c9a:	6c 2f       	mov	r22, r28
     c9c:	8a e0       	ldi	r24, 0x0A	; 10
     c9e:	0e 94 22 06 	call	0xc44	; 0xc44 <draw_square.constprop.3>
	draw_square(x + 2, y + 3, buffer_num);
     ca2:	6c 2f       	mov	r22, r28
     ca4:	8c e0       	ldi	r24, 0x0C	; 12
}
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28

static void draw4x4_square(uint8_t x, uint8_t y, uint8_t buffer_num) {
	draw_square(x, y+1, buffer_num);
	draw_square(x + 2, y+1, buffer_num);
	draw_square(x, y + 3, buffer_num);
	draw_square(x + 2, y + 3, buffer_num);
     caa:	0c 94 22 06 	jmp	0xc44	; 0xc44 <draw_square.constprop.3>

00000cae <draw_string>:

/* Draw a strictly alphabetical string at position (column, page) to the frame buffer.
 * This function is currently limited to writing to pages only.\
 * Support for unique y values was not necessary for the function
 * of the project. */
void draw_string(uint8_t column, uint8_t page, const char* text, uint8_t text_length, uint8_t buffer) {
     cae:	6f 92       	push	r6
     cb0:	7f 92       	push	r7
     cb2:	9f 92       	push	r9
     cb4:	af 92       	push	r10
     cb6:	bf 92       	push	r11
     cb8:	cf 92       	push	r12
     cba:	df 92       	push	r13
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	1f 92       	push	r1
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	b6 2e       	mov	r11, r22
     cd0:	7a 01       	movw	r14, r20
     cd2:	a2 2e       	mov	r10, r18
	uint8_t i, j;
	
	// For each character in the string
	for(i = 0; i < text_length; i++) {
     cd4:	98 2f       	mov	r25, r24
     cd6:	10 e0       	ldi	r17, 0x00	; 0
		// For the width of each character
		for(j = 0; j < CHARACTER_WIDTH; j++) {
			// Write the character byte pattern to the buffer.
			buffer_set_byte((i*CHARACTER_WIDTH) + j + column, page, pgm_read_byte(&(Font8x5[(int)text[i]][j])), buffer);
     cd8:	86 e0       	ldi	r24, 0x06	; 6
     cda:	98 2e       	mov	r9, r24
 * of the project. */
void draw_string(uint8_t column, uint8_t page, const char* text, uint8_t text_length, uint8_t buffer) {
	uint8_t i, j;
	
	// For each character in the string
	for(i = 0; i < text_length; i++) {
     cdc:	1a 15       	cp	r17, r10
     cde:	09 f1       	breq	.+66     	; 0xd22 <draw_string+0x74>
     ce0:	61 2c       	mov	r6, r1
     ce2:	71 2c       	mov	r7, r1
		// For the width of each character
		for(j = 0; j < CHARACTER_WIDTH; j++) {
			// Write the character byte pattern to the buffer.
			buffer_set_byte((i*CHARACTER_WIDTH) + j + column, page, pgm_read_byte(&(Font8x5[(int)text[i]][j])), buffer);
     ce4:	67 01       	movw	r12, r14
     ce6:	c1 0e       	add	r12, r17
     ce8:	d1 1c       	adc	r13, r1
     cea:	f6 01       	movw	r30, r12
     cec:	80 81       	ld	r24, Z
     cee:	f3 01       	movw	r30, r6
     cf0:	98 9e       	mul	r9, r24
     cf2:	e0 0d       	add	r30, r0
     cf4:	f1 1d       	adc	r31, r1
     cf6:	11 24       	eor	r1, r1
     cf8:	ec 5a       	subi	r30, 0xAC	; 172
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	44 91       	lpm	r20, Z
     cfe:	20 2f       	mov	r18, r16
     d00:	6b 2d       	mov	r22, r11
     d02:	86 2d       	mov	r24, r6
     d04:	89 0f       	add	r24, r25
     d06:	99 83       	std	Y+1, r25	; 0x01
     d08:	0e 94 68 08 	call	0x10d0	; 0x10d0 <buffer_set_byte>
     d0c:	ff ef       	ldi	r31, 0xFF	; 255
     d0e:	6f 1a       	sub	r6, r31
     d10:	7f 0a       	sbc	r7, r31
	uint8_t i, j;
	
	// For each character in the string
	for(i = 0; i < text_length; i++) {
		// For the width of each character
		for(j = 0; j < CHARACTER_WIDTH; j++) {
     d12:	99 81       	ldd	r25, Y+1	; 0x01
     d14:	86 e0       	ldi	r24, 0x06	; 6
     d16:	68 16       	cp	r6, r24
     d18:	71 04       	cpc	r7, r1
     d1a:	39 f7       	brne	.-50     	; 0xcea <draw_string+0x3c>
 * of the project. */
void draw_string(uint8_t column, uint8_t page, const char* text, uint8_t text_length, uint8_t buffer) {
	uint8_t i, j;
	
	// For each character in the string
	for(i = 0; i < text_length; i++) {
     d1c:	1f 5f       	subi	r17, 0xFF	; 255
     d1e:	9a 5f       	subi	r25, 0xFA	; 250
     d20:	dd cf       	rjmp	.-70     	; 0xcdc <draw_string+0x2e>
		for(j = 0; j < CHARACTER_WIDTH; j++) {
			// Write the character byte pattern to the buffer.
			buffer_set_byte((i*CHARACTER_WIDTH) + j + column, page, pgm_read_byte(&(Font8x5[(int)text[i]][j])), buffer);
		}
	}
}
     d22:	0f 90       	pop	r0
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	cf 90       	pop	r12
     d34:	bf 90       	pop	r11
     d36:	af 90       	pop	r10
     d38:	9f 90       	pop	r9
     d3a:	7f 90       	pop	r7
     d3c:	6f 90       	pop	r6
     d3e:	08 95       	ret

00000d40 <draw_number>:

/* Draws a strictly numeric string at position (column, page) to the frame buffer.
 * Currently only supports page height y poisitions. */
void draw_number(uint8_t column, uint8_t page, uint32_t number, uint8_t num_digits, uint8_t buffer) {
     d40:	2f 92       	push	r2
     d42:	3f 92       	push	r3
     d44:	4f 92       	push	r4
     d46:	5f 92       	push	r5
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	8f 92       	push	r8
     d4e:	9f 92       	push	r9
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	00 d0       	rcall	.+0      	; 0xd66 <draw_number+0x26>
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	66 2e       	mov	r6, r22
     d6c:	82 2e       	mov	r8, r18
     d6e:	74 2e       	mov	r7, r20
     d70:	a0 2e       	mov	r10, r16
     d72:	5e 2c       	mov	r5, r14
     d74:	b0 2e       	mov	r11, r16
     d76:	bb 0c       	add	r11, r11
     d78:	b0 0e       	add	r11, r16
     d7a:	bb 0c       	add	r11, r11
     d7c:	b8 0e       	add	r11, r24
	uint8_t i, j;
	uint8_t digit;
	
	// For each digits in the number
	for(i = num_digits; i > 0; i--) {
     d7e:	91 2c       	mov	r9, r1
		// Get the specific digit and find its index in the font array
		digit = number%10 + ASCII_CHAR_OFFSET;
     d80:	9a e0       	ldi	r25, 0x0A	; 10
     d82:	c9 2e       	mov	r12, r25
     d84:	d1 2c       	mov	r13, r1
     d86:	e1 2c       	mov	r14, r1
     d88:	f1 2c       	mov	r15, r1
void draw_number(uint8_t column, uint8_t page, uint32_t number, uint8_t num_digits, uint8_t buffer) {
	uint8_t i, j;
	uint8_t digit;
	
	// For each digits in the number
	for(i = num_digits; i > 0; i--) {
     d8a:	aa 20       	and	r10, r10
     d8c:	71 f1       	breq	.+92     	; 0xdea <draw_number+0xaa>
		// Get the specific digit and find its index in the font array
		digit = number%10 + ASCII_CHAR_OFFSET;
     d8e:	68 2d       	mov	r22, r8
     d90:	73 2f       	mov	r23, r19
     d92:	87 2d       	mov	r24, r7
     d94:	95 2f       	mov	r25, r21
     d96:	a7 01       	movw	r20, r14
     d98:	96 01       	movw	r18, r12
     d9a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__udivmodsi4>
     d9e:	60 5d       	subi	r22, 0xD0	; 208
		number /= 10;
     da0:	82 2e       	mov	r8, r18
     da2:	74 2e       	mov	r7, r20
     da4:	49 2c       	mov	r4, r9
     da6:	4b 0c       	add	r4, r11
     da8:	86 e0       	ldi	r24, 0x06	; 6
     daa:	68 9f       	mul	r22, r24
     dac:	80 01       	movw	r16, r0
     dae:	11 24       	eor	r1, r1
     db0:	21 2c       	mov	r2, r1
     db2:	31 2c       	mov	r3, r1
     db4:	0c 5a       	subi	r16, 0xAC	; 172
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	f8 01       	movw	r30, r16
     dba:	e2 0d       	add	r30, r2
     dbc:	f3 1d       	adc	r31, r3
		
		// Write character bytes to the buffer
		for(j = 0; j < CHARACTER_WIDTH; j++) {
			buffer_set_byte((i*CHARACTER_WIDTH) + j + column, page, pgm_read_byte(&(Font8x5[digit][j])), buffer);
     dbe:	44 91       	lpm	r20, Z
     dc0:	25 2d       	mov	r18, r5
     dc2:	66 2d       	mov	r22, r6
     dc4:	82 2d       	mov	r24, r2
     dc6:	84 0d       	add	r24, r4
     dc8:	39 83       	std	Y+1, r19	; 0x01
     dca:	5a 83       	std	Y+2, r21	; 0x02
     dcc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <buffer_set_byte>
     dd0:	ef ef       	ldi	r30, 0xFF	; 255
     dd2:	2e 1a       	sub	r2, r30
     dd4:	3e 0a       	sbc	r3, r30
		// Get the specific digit and find its index in the font array
		digit = number%10 + ASCII_CHAR_OFFSET;
		number /= 10;
		
		// Write character bytes to the buffer
		for(j = 0; j < CHARACTER_WIDTH; j++) {
     dd6:	39 81       	ldd	r19, Y+1	; 0x01
     dd8:	5a 81       	ldd	r21, Y+2	; 0x02
     dda:	f6 e0       	ldi	r31, 0x06	; 6
     ddc:	2f 16       	cp	r2, r31
     dde:	31 04       	cpc	r3, r1
     de0:	59 f7       	brne	.-42     	; 0xdb8 <draw_number+0x78>
void draw_number(uint8_t column, uint8_t page, uint32_t number, uint8_t num_digits, uint8_t buffer) {
	uint8_t i, j;
	uint8_t digit;
	
	// For each digits in the number
	for(i = num_digits; i > 0; i--) {
     de2:	aa 94       	dec	r10
     de4:	8a ef       	ldi	r24, 0xFA	; 250
     de6:	98 0e       	add	r9, r24
     de8:	d0 cf       	rjmp	.-96     	; 0xd8a <draw_number+0x4a>
		// Write character bytes to the buffer
		for(j = 0; j < CHARACTER_WIDTH; j++) {
			buffer_set_byte((i*CHARACTER_WIDTH) + j + column, page, pgm_read_byte(&(Font8x5[digit][j])), buffer);
		}
	}	
}	
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	9f 90       	pop	r9
     e04:	8f 90       	pop	r8
     e06:	7f 90       	pop	r7
     e08:	6f 90       	pop	r6
     e0a:	5f 90       	pop	r5
     e0c:	4f 90       	pop	r4
     e0e:	3f 90       	pop	r3
     e10:	2f 90       	pop	r2
     e12:	08 95       	ret

00000e14 <game_menu>:

/* Display a menu showing available games, allowing the user to select what to play */
uint8_t game_menu() {
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
	uint8_t sketch_string_length = strlen(sketch_game_string);
	uint8_t snake_string_length = strlen(snake_game_string);
	uint8_t life_string_length = strlen(life_game_string);
	
	// Draw game list
	buffer_clear(MENU_BUFFER);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0e 94 c0 07 	call	0xf80	; 0xf80 <buffer_clear>
	draw_string(MENU_STRINGS_COLUMN, MENU_START_PAGE, sketch_game_string, sketch_string_length, MENU_BUFFER);
     e22:	00 e0       	ldi	r16, 0x00	; 0
     e24:	26 e0       	ldi	r18, 0x06	; 6
     e26:	45 e8       	ldi	r20, 0x85	; 133
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	84 e1       	ldi	r24, 0x14	; 20
     e2e:	0e 94 57 06 	call	0xcae	; 0xcae <draw_string>
	draw_string(MENU_STRINGS_COLUMN, MENU_START_PAGE+1, snake_game_string, snake_string_length, MENU_BUFFER);
     e32:	25 e0       	ldi	r18, 0x05	; 5
     e34:	4f e7       	ldi	r20, 0x7F	; 127
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	62 e0       	ldi	r22, 0x02	; 2
     e3a:	84 e1       	ldi	r24, 0x14	; 20
     e3c:	0e 94 57 06 	call	0xcae	; 0xcae <draw_string>
	draw_string(MENU_STRINGS_COLUMN, MENU_START_PAGE+2, life_game_string, life_string_length, MENU_BUFFER);
     e40:	2c e0       	ldi	r18, 0x0C	; 12
     e42:	42 e7       	ldi	r20, 0x72	; 114
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	63 e0       	ldi	r22, 0x03	; 3
     e48:	84 e1       	ldi	r24, 0x14	; 20
     e4a:	0e 94 57 06 	call	0xcae	; 0xcae <draw_string>
	draw4x4_square(MENU_STRINGS_COLUMN/2, (menu_item + 1) * PAGE_HEIGHT, MENU_BUFFER); // Start selection at sketch
     e4e:	88 e0       	ldi	r24, 0x08	; 8
     e50:	0e 94 3f 06 	call	0xc7e	; 0xc7e <draw4x4_square.constprop.2>
	send_buffer_all(MENU_BUFFER);
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0e 94 db 08 	call	0x11b6	; 0x11b6 <send_buffer_all>
	}	
}	

/* Display a menu showing available games, allowing the user to select what to play */
uint8_t game_menu() {
	int8_t menu_item = SKETCH_GAME_SELECT;
     e5a:	10 e0       	ldi	r17, 0x00	; 0
	draw_string(MENU_STRINGS_COLUMN, MENU_START_PAGE+2, life_game_string, life_string_length, MENU_BUFFER);
	draw4x4_square(MENU_STRINGS_COLUMN/2, (menu_item + 1) * PAGE_HEIGHT, MENU_BUFFER); // Start selection at sketch
	send_buffer_all(MENU_BUFFER);
		
	// Get input from the user
	uint8_t button_timer = 0;
     e5c:	d0 e0       	ldi	r29, 0x00	; 0
	}	
}	

/* Display a menu showing available games, allowing the user to select what to play */
uint8_t game_menu() {
	int8_t menu_item = SKETCH_GAME_SELECT;
     e5e:	c0 e0       	ldi	r28, 0x00	; 0
			if(BUTTON_DOWN) menu_item++;
			// Input for selected current game
			if(BUTTON_A1) break;
			button_timer = 0;
		}
		button_timer++;
     e60:	df 5f       	subi	r29, 0xFF	; 255
		
		if(menu_item >= NUM_MENU_ITEMS) menu_item = 0;
     e62:	c3 30       	cpi	r28, 0x03	; 3
     e64:	24 f4       	brge	.+8      	; 0xe6e <game_menu+0x5a>
		if(menu_item < 0) menu_item = NUM_MENU_ITEMS - 1;
     e66:	c7 ff       	sbrs	r28, 7
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <game_menu+0x5c>
     e6a:	c2 e0       	ldi	r28, 0x02	; 2
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <game_menu+0x5c>
			if(BUTTON_A1) break;
			button_timer = 0;
		}
		button_timer++;
		
		if(menu_item >= NUM_MENU_ITEMS) menu_item = 0;
     e6e:	c0 e0       	ldi	r28, 0x00	; 0
		if(menu_item < 0) menu_item = NUM_MENU_ITEMS - 1;

		// Remove the previous square
		// Only need to clear if the menu selection has moved
		if(!(prev_menu_item == menu_item)) {
     e70:	1c 17       	cp	r17, r28
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <game_menu+0x9c>
			clear4x4_square(MENU_STRINGS_COLUMN/2, (prev_menu_item + 1) * PAGE_HEIGHT, MENU_BUFFER);
     e74:	11 0f       	add	r17, r17
     e76:	11 0f       	add	r17, r17
     e78:	11 0f       	add	r17, r17
     e7a:	18 5f       	subi	r17, 0xF8	; 248
	buffer_clear_bit(x, y + 1, buffer_num);
	buffer_clear_bit(x + 1, y + 1, buffer_num);
}

static void clear4x4_square(uint8_t x, uint8_t y, uint8_t buffer_num) {
	clear_square(x, y+1, buffer_num);
     e7c:	01 e0       	ldi	r16, 0x01	; 1
     e7e:	01 0f       	add	r16, r17
     e80:	60 2f       	mov	r22, r16
     e82:	8a e0       	ldi	r24, 0x0A	; 10
     e84:	0e 94 05 06 	call	0xc0a	; 0xc0a <clear_square.constprop.1>
	clear_square(x + 2, y+1, buffer_num);
     e88:	60 2f       	mov	r22, r16
     e8a:	8c e0       	ldi	r24, 0x0C	; 12
     e8c:	0e 94 05 06 	call	0xc0a	; 0xc0a <clear_square.constprop.1>
	clear_square(x, y + 3, buffer_num);
     e90:	1d 5f       	subi	r17, 0xFD	; 253
     e92:	61 2f       	mov	r22, r17
     e94:	8a e0       	ldi	r24, 0x0A	; 10
     e96:	0e 94 05 06 	call	0xc0a	; 0xc0a <clear_square.constprop.1>
	clear_square(x + 2, y + 3, buffer_num);
     e9a:	61 2f       	mov	r22, r17
     e9c:	8c e0       	ldi	r24, 0x0C	; 12
     e9e:	0e 94 05 06 	call	0xc0a	; 0xc0a <clear_square.constprop.1>
		if(!(prev_menu_item == menu_item)) {
			clear4x4_square(MENU_STRINGS_COLUMN/2, (prev_menu_item + 1) * PAGE_HEIGHT, MENU_BUFFER);
			
			// Draw dot next to current menu item
			// Center of dot at game_strings_column/2
			draw4x4_square(MENU_STRINGS_COLUMN/2, (menu_item + 1) * PAGE_HEIGHT, MENU_BUFFER);
     ea2:	8c 2f       	mov	r24, r28
     ea4:	88 0f       	add	r24, r24
     ea6:	88 0f       	add	r24, r24
     ea8:	88 0f       	add	r24, r24
     eaa:	88 5f       	subi	r24, 0xF8	; 248
     eac:	0e 94 3f 06 	call	0xc7e	; 0xc7e <draw4x4_square.constprop.2>
		}
		
		send_buffer_all(MENU_BUFFER);
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	0e 94 db 08 	call	0x11b6	; 0x11b6 <send_buffer_all>
	send_buffer_all(MENU_BUFFER);
		
	// Get input from the user
	uint8_t button_timer = 0;
	while(1) {
		if(button_timer > BUTTON_TIMER_COUNT) {
     eb6:	d5 30       	cpi	r29, 0x05	; 5
     eb8:	70 f0       	brcs	.+28     	; 0xed6 <game_menu+0xc2>
			// Input for moving up and down menu
			if(BUTTON_UP) menu_item--;
     eba:	87 99       	sbic	0x10, 7	; 16
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <game_menu+0xb0>
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	8c 0f       	add	r24, r28
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <game_menu+0xb2>
     ec4:	8c 2f       	mov	r24, r28
			if(BUTTON_DOWN) menu_item++;
     ec6:	85 9b       	sbis	0x10, 5	; 16
     ec8:	8f 5f       	subi	r24, 0xFF	; 255
			// Input for selected current game
			if(BUTTON_A1) break;
     eca:	83 9b       	sbis	0x10, 3	; 16
     ecc:	06 c0       	rjmp	.+12     	; 0xeda <game_menu+0xc6>
			button_timer = 0;
     ece:	d0 e0       	ldi	r29, 0x00	; 0
     ed0:	1c 2f       	mov	r17, r28
     ed2:	c8 2f       	mov	r28, r24
     ed4:	c5 cf       	rjmp	.-118    	; 0xe60 <game_menu+0x4c>
     ed6:	8c 2f       	mov	r24, r28
     ed8:	fb cf       	rjmp	.-10     	; 0xed0 <game_menu+0xbc>
		send_buffer_all(MENU_BUFFER);
		prev_menu_item = menu_item;
	}
	
	return menu_item;
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	08 95       	ret

00000ee4 <fram_init>:
#include "spi.h"
#include "defines.h"

/* Initialize FRAM pins */
void fram_init() {
	FRAM_PORT_DIR |= FRAM_PINS_MASK;
     ee4:	87 b3       	in	r24, 0x17	; 23
     ee6:	87 60       	ori	r24, 0x07	; 7
     ee8:	87 bb       	out	0x17, r24	; 23
	FRAM_PORT |= _BV(FRAM_WP); // disable writes to the status register
     eea:	c1 9a       	sbi	0x18, 1	; 24
	FRAM_PORT |= _BV(FRAM_CS); // disable chip select at startup
     eec:	c2 9a       	sbi	0x18, 2	; 24
	FRAM_PORT |= _BV(FRAM_HOLD); // don't hold any operations yet
     eee:	c0 9a       	sbi	0x18, 0	; 24
     ef0:	08 95       	ret

00000ef2 <fram_enable_write>:
}

/* Sends appropriate opcode to enable writing to the FRAM */
void fram_enable_write() {
	// Chip select
	FRAM_PORT &= ~_BV(FRAM_CS);
     ef2:	c2 98       	cbi	0x18, 2	; 24
	spi_transmit(FRAM_WREN_OPCODE); // WREN opcode to enable writing
     ef4:	86 e0       	ldi	r24, 0x06	; 6
     ef6:	0e 94 a5 0c 	call	0x194a	; 0x194a <spi_transmit>
	FRAM_PORT |= _BV(FRAM_CS); // Toggle chip select in between opcodes
     efa:	c2 9a       	sbi	0x18, 2	; 24
	
	FRAM_PORT &= ~_BV(FRAM_CS);
     efc:	c2 98       	cbi	0x18, 2	; 24
	spi_transmit(FRAM_WRITE_OPCODE);
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <spi_transmit>

00000f04 <fram_enable_read>:
}

/* Sends appropriate opcode to enable reading from the FRAM */
void fram_enable_read() {
	// Enable chip select
	FRAM_PORT &= ~_BV(FRAM_CS);	
     f04:	c2 98       	cbi	0x18, 2	; 24
	spi_transmit(FRAM_READ_OPCODE);
     f06:	83 e0       	ldi	r24, 0x03	; 3
     f08:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <spi_transmit>

00000f0c <fram_disable>:
}

void fram_disable() {
	// Disable chip select
	FRAM_PORT |= _BV(FRAM_CS);
     f0c:	c2 9a       	sbi	0x18, 2	; 24
     f0e:	08 95       	ret

00000f10 <fram_write>:

/* Writes a single byte 'data' to 'address' in the FRAM. 
 * This function assumes the caller has already enabled the FRAM with
 * its Chip Select input, and also sent the WREN (Write Enable) opcode and WRITE opcode
 * This can be done by calling FRAM_Enable_Write() */
 void fram_write(uint16_t address, uint8_t data) {
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	00 d0       	rcall	.+0      	; 0xf18 <fram_write+0x8>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	18 2f       	mov	r17, r24
	 fram_enable_write();
     f1e:	6a 83       	std	Y+2, r22	; 0x02
     f20:	99 83       	std	Y+1, r25	; 0x01
     f22:	0e 94 79 07 	call	0xef2	; 0xef2 <fram_enable_write>
	 spi_transmit((address >> 8) & 0xFF);  // transfer upper byte
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	0e 94 a5 0c 	call	0x194a	; 0x194a <spi_transmit>
	 spi_transmit(address & 0xFF);		   // transfer lower byte
     f2c:	81 2f       	mov	r24, r17
     f2e:	0e 94 a5 0c 	call	0x194a	; 0x194a <spi_transmit>
	 spi_transmit(data);
     f32:	6a 81       	ldd	r22, Y+2	; 0x02
     f34:	86 2f       	mov	r24, r22
     f36:	0e 94 a5 0c 	call	0x194a	; 0x194a <spi_transmit>
	 fram_disable();
 }
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
 void fram_write(uint16_t address, uint8_t data) {
	 fram_enable_write();
	 spi_transmit((address >> 8) & 0xFF);  // transfer upper byte
	 spi_transmit(address & 0xFF);		   // transfer lower byte
	 spi_transmit(data);
	 fram_disable();
     f44:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <fram_disable>

00000f48 <fram_read>:

/* Reads and returns a single byte from 'address' in the FRAM. 
 * This function assumes the caller has already enabled the FRAM with
 * its Chip Select input
 * This can be done by calling FRAM_Enable_Read() */
uint8_t fram_read(uint16_t address) {
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	1f 92       	push	r1
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	18 2f       	mov	r17, r24
	fram_enable_read();
     f56:	99 83       	std	Y+1, r25	; 0x01
     f58:	0e 94 82 07 	call	0xf04	; 0xf04 <fram_enable_read>
	spi_transmit((address >> 8) & 0xFF);
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	0e 94 a5 0c 	call	0x194a	; 0x194a <spi_transmit>
	spi_transmit(address & 0xFF);
     f62:	81 2f       	mov	r24, r17
     f64:	0e 94 a5 0c 	call	0x194a	; 0x194a <spi_transmit>
	uint8_t data = spi_transmit(SPI_DUMMY);
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	0e 94 a5 0c 	call	0x194a	; 0x194a <spi_transmit>
	fram_disable();
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	0e 94 86 07 	call	0xf0c	; 0xf0c <fram_disable>
	return data;
}
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	0f 90       	pop	r0
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	08 95       	ret

00000f80 <buffer_clear>:
	buffer_clear(FRAME1);
}

// Set all bits in the selected LCD buffer to zero
void buffer_clear(uint8_t buffer)
{
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
	uint16_t addr, start_addr, stop_addr;
	if(buffer == FRAME0) {
     f88:	81 11       	cpse	r24, r1
     f8a:	05 c0       	rjmp	.+10     	; 0xf96 <buffer_clear+0x16>
		start_addr = BUFFER_0_START_ADDR;
		stop_addr = BUFFER_0_STOP_ADDR;
     f8c:	0f e2       	ldi	r16, 0x2F	; 47
     f8e:	13 e0       	ldi	r17, 0x03	; 3
// Set all bits in the selected LCD buffer to zero
void buffer_clear(uint8_t buffer)
{
	uint16_t addr, start_addr, stop_addr;
	if(buffer == FRAME0) {
		start_addr = BUFFER_0_START_ADDR;
     f90:	c0 e0       	ldi	r28, 0x00	; 0
     f92:	d0 e0       	ldi	r29, 0x00	; 0
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <buffer_clear+0x1e>
		stop_addr = BUFFER_0_STOP_ADDR;
	} else {
		start_addr = BUFFER_1_START_ADDR;
		stop_addr = BUFFER_1_STOP_ADDR;
     f96:	0f e5       	ldi	r16, 0x5F	; 95
     f98:	16 e0       	ldi	r17, 0x06	; 6
	uint16_t addr, start_addr, stop_addr;
	if(buffer == FRAME0) {
		start_addr = BUFFER_0_START_ADDR;
		stop_addr = BUFFER_0_STOP_ADDR;
	} else {
		start_addr = BUFFER_1_START_ADDR;
     f9a:	c0 e3       	ldi	r28, 0x30	; 48
     f9c:	d3 e0       	ldi	r29, 0x03	; 3
		stop_addr = BUFFER_1_STOP_ADDR;
	}

	// Set all values in buffer to zero (nothing to display)
	for(addr = start_addr; addr <= stop_addr; addr++) {
     f9e:	0c 17       	cp	r16, r28
     fa0:	1d 07       	cpc	r17, r29
     fa2:	30 f0       	brcs	.+12     	; 0xfb0 <buffer_clear+0x30>
		fram_write(addr, CLEAR);
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	ce 01       	movw	r24, r28
     fa8:	0e 94 88 07 	call	0xf10	; 0xf10 <fram_write>
		start_addr = BUFFER_1_START_ADDR;
		stop_addr = BUFFER_1_STOP_ADDR;
	}

	// Set all values in buffer to zero (nothing to display)
	for(addr = start_addr; addr <= stop_addr; addr++) {
     fac:	21 96       	adiw	r28, 0x01	; 1
     fae:	f7 cf       	rjmp	.-18     	; 0xf9e <buffer_clear+0x1e>
		fram_write(addr, CLEAR);
	}
}
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	08 95       	ret

00000fba <buffer_set_bit>:

/* Sets a bit at position (x, y) in the buffer stored in FRAM.
 * This functions reads the current byte where the bit to be set is,
 * to make sure it does not clobber the existing bit values there. */
void buffer_set_bit(uint8_t x, uint8_t y, uint8_t buffer) {
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	1f 92       	push	r1
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	uint8_t page = y/NUM_PAGES; // find page bit is in
     fc8:	96 2f       	mov	r25, r22
     fca:	96 95       	lsr	r25
     fcc:	96 95       	lsr	r25
     fce:	96 95       	lsr	r25
	uint16_t addr = page*PAGE_WIDTH + x + (buffer * BUFFER_SIZE); // address in FRAM
     fd0:	08 2f       	mov	r16, r24
     fd2:	10 e0       	ldi	r17, 0x00	; 0
     fd4:	86 e6       	ldi	r24, 0x66	; 102
     fd6:	98 9f       	mul	r25, r24
     fd8:	00 0d       	add	r16, r0
     fda:	11 1d       	adc	r17, r1
     fdc:	11 24       	eor	r1, r1
     fde:	20 e3       	ldi	r18, 0x30	; 48
     fe0:	33 e0       	ldi	r19, 0x03	; 3
     fe2:	42 9f       	mul	r20, r18
     fe4:	c0 01       	movw	r24, r0
     fe6:	43 9f       	mul	r20, r19
     fe8:	90 0d       	add	r25, r0
     fea:	11 24       	eor	r1, r1
     fec:	08 0f       	add	r16, r24
     fee:	19 1f       	adc	r17, r25
	uint8_t current_data = fram_read(addr); // get current bit value
     ff0:	c8 01       	movw	r24, r16
     ff2:	69 83       	std	Y+1, r22	; 0x01
     ff4:	0e 94 a4 07 	call	0xf48	; 0xf48 <fram_read>
	uint8_t data = current_data | _BV(y%8); // OR with bit to be written
     ff8:	69 81       	ldd	r22, Y+1	; 0x01
     ffa:	96 2f       	mov	r25, r22
     ffc:	97 70       	andi	r25, 0x07	; 7
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <buffer_set_bit+0x4c>
    1004:	66 0f       	add	r22, r22
    1006:	9a 95       	dec	r25
    1008:	ea f7       	brpl	.-6      	; 0x1004 <buffer_set_bit+0x4a>
    100a:	68 2b       	or	r22, r24
	fram_write(addr, data); // write data
    100c:	c8 01       	movw	r24, r16
}
    100e:	0f 90       	pop	r0
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
void buffer_set_bit(uint8_t x, uint8_t y, uint8_t buffer) {
	uint8_t page = y/NUM_PAGES; // find page bit is in
	uint16_t addr = page*PAGE_WIDTH + x + (buffer * BUFFER_SIZE); // address in FRAM
	uint8_t current_data = fram_read(addr); // get current bit value
	uint8_t data = current_data | _BV(y%8); // OR with bit to be written
	fram_write(addr, data); // write data
    1018:	0c 94 88 07 	jmp	0xf10	; 0xf10 <fram_write>

0000101c <buffer_get_bit>:
}

/* Returns the state of the bit at position (x, y) */
uint8_t buffer_get_bit(uint8_t x, uint8_t y, uint8_t buffer) {
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	1f 92       	push	r1
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	uint8_t page = y/NUM_PAGES;
    1026:	26 2f       	mov	r18, r22
    1028:	26 95       	lsr	r18
    102a:	26 95       	lsr	r18
    102c:	26 95       	lsr	r18
	uint16_t addr = page*PAGE_WIDTH + x + (buffer * BUFFER_SIZE);
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	36 e6       	ldi	r19, 0x66	; 102
    1032:	23 9f       	mul	r18, r19
    1034:	80 0d       	add	r24, r0
    1036:	91 1d       	adc	r25, r1
    1038:	11 24       	eor	r1, r1
    103a:	e0 e3       	ldi	r30, 0x30	; 48
    103c:	f3 e0       	ldi	r31, 0x03	; 3
    103e:	4e 9f       	mul	r20, r30
    1040:	90 01       	movw	r18, r0
    1042:	4f 9f       	mul	r20, r31
    1044:	30 0d       	add	r19, r0
    1046:	11 24       	eor	r1, r1
	uint8_t bit_state = (fram_read(addr) & _BV(y%8)) ? SET : CLEAR;
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	69 83       	std	Y+1, r22	; 0x01
    104e:	0e 94 a4 07 	call	0xf48	; 0xf48 <fram_read>
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	69 81       	ldd	r22, Y+1	; 0x01
    1056:	67 70       	andi	r22, 0x07	; 7
    1058:	02 c0       	rjmp	.+4      	; 0x105e <buffer_get_bit+0x42>
    105a:	95 95       	asr	r25
    105c:	87 95       	ror	r24
    105e:	6a 95       	dec	r22
    1060:	e2 f7       	brpl	.-8      	; 0x105a <buffer_get_bit+0x3e>
	return bit_state;
}
    1062:	81 70       	andi	r24, 0x01	; 1
    1064:	0f 90       	pop	r0
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <buffer_clear_bit>:

/* Clears a bit at position (x, y) in the buffer stored in FRAM.
 * This functions reads the current byte where the bit to be set is,
 * to make sure it does not clobber the existing bit values there. */
void buffer_clear_bit(uint8_t x, uint8_t y, uint8_t buffer) {
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	1f 92       	push	r1
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	uint8_t page = y/8;
    107a:	96 2f       	mov	r25, r22
    107c:	96 95       	lsr	r25
    107e:	96 95       	lsr	r25
    1080:	96 95       	lsr	r25
	uint16_t addr = page*PAGE_WIDTH + x + (buffer * BUFFER_SIZE);
    1082:	08 2f       	mov	r16, r24
    1084:	10 e0       	ldi	r17, 0x00	; 0
    1086:	86 e6       	ldi	r24, 0x66	; 102
    1088:	98 9f       	mul	r25, r24
    108a:	00 0d       	add	r16, r0
    108c:	11 1d       	adc	r17, r1
    108e:	11 24       	eor	r1, r1
    1090:	20 e3       	ldi	r18, 0x30	; 48
    1092:	33 e0       	ldi	r19, 0x03	; 3
    1094:	42 9f       	mul	r20, r18
    1096:	c0 01       	movw	r24, r0
    1098:	43 9f       	mul	r20, r19
    109a:	90 0d       	add	r25, r0
    109c:	11 24       	eor	r1, r1
    109e:	08 0f       	add	r16, r24
    10a0:	19 1f       	adc	r17, r25
	uint8_t current_data = fram_read(addr);
    10a2:	c8 01       	movw	r24, r16
    10a4:	69 83       	std	Y+1, r22	; 0x01
    10a6:	0e 94 a4 07 	call	0xf48	; 0xf48 <fram_read>
	uint8_t data = (~_BV(y%8)) & current_data;
    10aa:	69 81       	ldd	r22, Y+1	; 0x01
    10ac:	67 70       	andi	r22, 0x07	; 7
    10ae:	21 e0       	ldi	r18, 0x01	; 1
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <buffer_clear_bit+0x4a>
    10b4:	22 0f       	add	r18, r18
    10b6:	6a 95       	dec	r22
    10b8:	ea f7       	brpl	.-6      	; 0x10b4 <buffer_clear_bit+0x48>
    10ba:	62 2f       	mov	r22, r18
    10bc:	60 95       	com	r22
    10be:	68 23       	and	r22, r24
	fram_write(addr, data);
    10c0:	c8 01       	movw	r24, r16
}
    10c2:	0f 90       	pop	r0
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
void buffer_clear_bit(uint8_t x, uint8_t y, uint8_t buffer) {
	uint8_t page = y/8;
	uint16_t addr = page*PAGE_WIDTH + x + (buffer * BUFFER_SIZE);
	uint8_t current_data = fram_read(addr);
	uint8_t data = (~_BV(y%8)) & current_data;
	fram_write(addr, data);
    10cc:	0c 94 88 07 	jmp	0xf10	; 0xf10 <fram_write>

000010d0 <buffer_set_byte>:
}

/* Set entire byte value at selected position */
void buffer_set_byte(uint8_t x, uint8_t page, uint8_t byte_val, uint8_t buffer)
{
	fram_write(page*PAGE_WIDTH + x + (buffer * BUFFER_SIZE), byte_val);
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	36 e6       	ldi	r19, 0x66	; 102
    10d4:	63 9f       	mul	r22, r19
    10d6:	80 0d       	add	r24, r0
    10d8:	91 1d       	adc	r25, r1
    10da:	11 24       	eor	r1, r1
    10dc:	a0 e3       	ldi	r26, 0x30	; 48
    10de:	b3 e0       	ldi	r27, 0x03	; 3
    10e0:	2a 9f       	mul	r18, r26
    10e2:	f0 01       	movw	r30, r0
    10e4:	2b 9f       	mul	r18, r27
    10e6:	f0 0d       	add	r31, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	64 2f       	mov	r22, r20
    10ec:	8e 0f       	add	r24, r30
    10ee:	9f 1f       	adc	r25, r31
    10f0:	0c 94 88 07 	jmp	0xf10	; 0xf10 <fram_write>

000010f4 <send_buffer_page>:
}

/* Send on page of the buffer to the LCD.
 * First reads in one entire page of data stored in the FRAM, then sends it on 
 * to the LCD. */
void send_buffer_page(uint8_t buffer) {
    10f4:	cf 92       	push	r12
    10f6:	df 92       	push	r13
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	c6 56       	subi	r28, 0x66	; 102
    110a:	d1 09       	sbc	r29, r1
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
	uint8_t page_data[NUM_COLUMNS];
	static uint8_t page = 0;
	
	// Get page data from FRAM
	for(column = 0; column < NUM_COLUMNS; column++) {
		page_data[column] = fram_read(page*PAGE_WIDTH + column + (buffer * BUFFER_SIZE));
    1116:	20 e3       	ldi	r18, 0x30	; 48
    1118:	33 e0       	ldi	r19, 0x03	; 3
    111a:	82 9f       	mul	r24, r18
    111c:	60 01       	movw	r12, r0
    111e:	83 9f       	mul	r24, r19
    1120:	d0 0c       	add	r13, r0
    1122:	11 24       	eor	r1, r1
    1124:	9e 01       	movw	r18, r28
    1126:	2f 5f       	subi	r18, 0xFF	; 255
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	79 01       	movw	r14, r18
    112c:	00 e0       	ldi	r16, 0x00	; 0
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	80 91 c4 00 	lds	r24, 0x00C4
    1134:	f8 01       	movw	r30, r16
    1136:	26 e6       	ldi	r18, 0x66	; 102
    1138:	82 9f       	mul	r24, r18
    113a:	e0 0d       	add	r30, r0
    113c:	f1 1d       	adc	r31, r1
    113e:	11 24       	eor	r1, r1
    1140:	cf 01       	movw	r24, r30
    1142:	8c 0d       	add	r24, r12
    1144:	9d 1d       	adc	r25, r13
    1146:	0e 94 a4 07 	call	0xf48	; 0xf48 <fram_read>
    114a:	f7 01       	movw	r30, r14
    114c:	81 93       	st	Z+, r24
    114e:	7f 01       	movw	r14, r30
    1150:	0f 5f       	subi	r16, 0xFF	; 255
    1152:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t column;
	uint8_t page_data[NUM_COLUMNS];
	static uint8_t page = 0;
	
	// Get page data from FRAM
	for(column = 0; column < NUM_COLUMNS; column++) {
    1154:	06 36       	cpi	r16, 0x66	; 102
    1156:	11 05       	cpc	r17, r1
    1158:	59 f7       	brne	.-42     	; 0x1130 <send_buffer_page+0x3c>
		page_data[column] = fram_read(page*PAGE_WIDTH + column + (buffer * BUFFER_SIZE));
	}
	
	// Write page data to the LCD
	lcd_set_page(page);	
    115a:	80 91 c4 00 	lds	r24, 0x00C4
    115e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <lcd_set_page>
    1162:	8e 01       	movw	r16, r28
    1164:	0f 5f       	subi	r16, 0xFF	; 255
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
	for(column = 0; column < NUM_COLUMNS; column++) {
    1168:	f1 2c       	mov	r15, r1
		lcd_set_column(column);
    116a:	8f 2d       	mov	r24, r15
    116c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_set_column>
		lcd_send_data(page_data[column]);
    1170:	f8 01       	movw	r30, r16
    1172:	81 91       	ld	r24, Z+
    1174:	8f 01       	movw	r16, r30
    1176:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <lcd_send_data>
		page_data[column] = fram_read(page*PAGE_WIDTH + column + (buffer * BUFFER_SIZE));
	}
	
	// Write page data to the LCD
	lcd_set_page(page);	
	for(column = 0; column < NUM_COLUMNS; column++) {
    117a:	f3 94       	inc	r15
    117c:	f6 e6       	ldi	r31, 0x66	; 102
    117e:	ff 12       	cpse	r15, r31
    1180:	f4 cf       	rjmp	.-24     	; 0x116a <send_buffer_page+0x76>
		lcd_set_column(column);
		lcd_send_data(page_data[column]);
	}
	
	page++;
    1182:	80 91 c4 00 	lds	r24, 0x00C4
    1186:	8f 5f       	subi	r24, 0xFF	; 255
	if(page >= NUM_PAGES) {
    1188:	88 30       	cpi	r24, 0x08	; 8
    118a:	18 f4       	brcc	.+6      	; 0x1192 <send_buffer_page+0x9e>
	for(column = 0; column < NUM_COLUMNS; column++) {
		lcd_set_column(column);
		lcd_send_data(page_data[column]);
	}
	
	page++;
    118c:	80 93 c4 00 	sts	0x00C4, r24
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <send_buffer_page+0xa2>
	if(page >= NUM_PAGES) {
		page = 0;
    1192:	10 92 c4 00 	sts	0x00C4, r1
	}
}
    1196:	ca 59       	subi	r28, 0x9A	; 154
    1198:	df 4f       	sbci	r29, 0xFF	; 255
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	08 95       	ret

000011b6 <send_buffer_all>:
	fram_write(page*PAGE_WIDTH + x + (buffer * BUFFER_SIZE), byte_val);
}

// Send all (NUM_PAGES) pages in the buffer to the LCD
void send_buffer_all(uint8_t buffer)
{
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	d8 2f       	mov	r29, r24
    11bc:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t i;
	for(i = 0; i < NUM_PAGES; i++) {
		send_buffer_page(buffer);
    11be:	8d 2f       	mov	r24, r29
    11c0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <send_buffer_page>
    11c4:	c1 50       	subi	r28, 0x01	; 1

// Send all (NUM_PAGES) pages in the buffer to the LCD
void send_buffer_all(uint8_t buffer)
{
	uint8_t i;
	for(i = 0; i < NUM_PAGES; i++) {
    11c6:	d9 f7       	brne	.-10     	; 0x11be <send_buffer_all+0x8>
		send_buffer_page(buffer);
	}
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <main>:
const uint8_t menu_select_error_str_length = 13;

int main(void) {
	
	// Peripheral setup
	adc_init();
    11ce:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <adc_init>
	spi_init();	
    11d2:	0e 94 99 0c 	call	0x1932	; 0x1932 <spi_init>
	lcd_init();
    11d6:	0e 94 cb 0c 	call	0x1996	; 0x1996 <lcd_init>
	lcd_screen_clear();
    11da:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <lcd_screen_clear>
	fram_init();
    11de:	0e 94 72 07 	call	0xee4	; 0xee4 <fram_init>
	
	buttons_init();
    11e2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <buttons_init>
	battery_init();
    11e6:	0e 94 49 03 	call	0x692	; 0x692 <battery_init>
	
	setup_interrupts();
    11ea:	0e 94 59 03 	call	0x6b2	; 0x6b2 <setup_interrupts>
	sei();
    11ee:	78 94       	sei
	
    while(1) {
		// Game selection menu
		uint8_t game_selection = game_menu();
    11f0:	0e 94 0a 07 	call	0xe14	; 0xe14 <game_menu>
		switch(game_selection) {
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	49 f0       	breq	.+18     	; 0x120a <main+0x3c>
    11f8:	28 f0       	brcs	.+10     	; 0x1204 <main+0x36>
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	49 f4       	brne	.+18     	; 0x1210 <main+0x42>
				break;			
			case SNAKE_GAME_SELECT:
				snake();
				break;			
			case LIFE_GAME_SELECT:
				life();
    11fe:	0e 94 1e 04 	call	0x83c	; 0x83c <life>
				break;			
    1202:	f6 cf       	rjmp	.-20     	; 0x11f0 <main+0x22>
    while(1) {
		// Game selection menu
		uint8_t game_selection = game_menu();
		switch(game_selection) {
			case SKETCH_GAME_SELECT:
				sketch();
    1204:	0e 94 11 09 	call	0x1222	; 0x1222 <sketch>
				break;			
    1208:	f3 cf       	rjmp	.-26     	; 0x11f0 <main+0x22>
			case SNAKE_GAME_SELECT:
				snake();
    120a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <snake>
				break;			
    120e:	f0 cf       	rjmp	.-32     	; 0x11f0 <main+0x22>
			case LIFE_GAME_SELECT:
				life();
				break;			
			default:
				draw_string(COLUMN_10, PAGE_3, menu_select_error_str, menu_select_error_str_length, FRAME0);
    1210:	00 e0       	ldi	r16, 0x00	; 0
    1212:	2d e0       	ldi	r18, 0x0D	; 13
    1214:	4c e8       	ldi	r20, 0x8C	; 140
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	63 e0       	ldi	r22, 0x03	; 3
    121a:	8a e0       	ldi	r24, 0x0A	; 10
    121c:	0e 94 57 06 	call	0xcae	; 0xcae <draw_string>
				break;
    1220:	e7 cf       	rjmp	.-50     	; 0x11f0 <main+0x22>

00001222 <sketch>:
#include "touchscreen.h"
#include "dialogs.h"
#include "defines.h"

void
sketch() {
    1222:	cf 92       	push	r12
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	00 d0       	rcall	.+0      	; 0x1234 <sketch+0x12>
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	// Start drawing position in center of screen
	uint8_t sketch_x = SKETCH_START_X;
    1238:	83 e3       	ldi	r24, 0x33	; 51
    123a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t sketch_y = SKETCH_START_Y;
    123c:	80 e2       	ldi	r24, 0x20	; 32
    123e:	89 83       	std	Y+1, r24	; 0x01
	
	uint8_t button_timer = 0;
	uint8_t potentiometer_input = FALSE;
    1240:	00 e0       	ldi	r16, 0x00	; 0
sketch() {
	// Start drawing position in center of screen
	uint8_t sketch_x = SKETCH_START_X;
	uint8_t sketch_y = SKETCH_START_Y;
	
	uint8_t button_timer = 0;
    1242:	10 e0       	ldi	r17, 0x00	; 0
		// Check if the user wants to reset the drawing space
		if(BUTTON_A1) {
			buffer_clear(SKETCH_FRAME);
			
			// Reset cursor position
			sketch_x = SKETCH_START_X;
    1244:	83 e3       	ldi	r24, 0x33	; 51
    1246:	f8 2e       	mov	r15, r24
			sketch_y = SKETCH_START_Y;
    1248:	90 e2       	ldi	r25, 0x20	; 32
    124a:	e9 2e       	mov	r14, r25
			}			
			button_timer++;
		}
		
		// Check display limits
		if(sketch_x >= SKETCH_MAX_X) sketch_x = SKETCH_MAX_X;
    124c:	25 e6       	ldi	r18, 0x65	; 101
    124e:	d2 2e       	mov	r13, r18
		if(sketch_x <= SKETCH_MIN_X+1) sketch_x = SKETCH_MIN_X+1;
		if(sketch_y >= SKETCH_MAX_Y) sketch_y = SKETCH_MAX_Y;
    1250:	3f e3       	ldi	r19, 0x3F	; 63
    1252:	c3 2e       	mov	r12, r19
	uint8_t potentiometer_input = FALSE;
	
	// Main Sketch loop
	while(1) {
		// Check if the user wants to quit
		if(BUTTON_A2) {
    1254:	81 99       	sbic	0x10, 1	; 16
    1256:	0e c0       	rjmp	.+28     	; 0x1274 <sketch+0x52>
			buffer_clear(SKETCH_FRAME);
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	0e 94 c0 07 	call	0xf80	; 0xf80 <buffer_clear>
		//draw_number(50, 0, sketch_x, 3, SKETCH_FRAME);
		//draw_number(50, 1, sketch_y, 3, SKETCH_FRAME);
		
		send_buffer_page(SKETCH_FRAME);
	} // End Main Sketch loop
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	08 95       	ret
			buffer_clear(SKETCH_FRAME);
			break;
		}
		
		// Check if the user wants to reset the drawing space
		if(BUTTON_A1) {
    1274:	83 99       	sbic	0x10, 3	; 16
    1276:	05 c0       	rjmp	.+10     	; 0x1282 <sketch+0x60>
			buffer_clear(SKETCH_FRAME);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	0e 94 c0 07 	call	0xf80	; 0xf80 <buffer_clear>
			
			// Reset cursor position
			sketch_x = SKETCH_START_X;
    127e:	fa 82       	std	Y+2, r15	; 0x02
			sketch_y = SKETCH_START_Y;
    1280:	e9 82       	std	Y+1, r14	; 0x01
		}
		
		// Switch input mode
		if(BUTTON_UP && BUTTON_A1) {
    1282:	87 99       	sbic	0x10, 7	; 16
    1284:	28 c0       	rjmp	.+80     	; 0x12d6 <sketch+0xb4>
    1286:	83 99       	sbic	0x10, 3	; 16
    1288:	26 c0       	rjmp	.+76     	; 0x12d6 <sketch+0xb4>
			if(potentiometer_input) {
    128a:	00 23       	and	r16, r16
    128c:	91 f0       	breq	.+36     	; 0x12b2 <sketch+0x90>
				potentiometer_input = FALSE;
				draw_string(0, 0, "B", 1, SKETCH_FRAME);
    128e:	01 e0       	ldi	r16, 0x01	; 1
    1290:	21 e0       	ldi	r18, 0x01	; 1
    1292:	4a e9       	ldi	r20, 0x9A	; 154
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	0e 94 57 06 	call	0xcae	; 0xcae <draw_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    129e:	2f ef       	ldi	r18, 0xFF	; 255
    12a0:	81 ee       	ldi	r24, 0xE1	; 225
    12a2:	94 e0       	ldi	r25, 0x04	; 4
    12a4:	21 50       	subi	r18, 0x01	; 1
    12a6:	80 40       	sbci	r24, 0x00	; 0
    12a8:	90 40       	sbci	r25, 0x00	; 0
    12aa:	e1 f7       	brne	.-8      	; 0x12a4 <sketch+0x82>
    12ac:	00 c0       	rjmp	.+0      	; 0x12ae <sketch+0x8c>
    12ae:	00 00       	nop
    12b0:	1d c0       	rjmp	.+58     	; 0x12ec <sketch+0xca>
				_delay_ms(200);
			} else {
				potentiometer_input = TRUE;
				draw_string(0, 0, "P", 1, SKETCH_FRAME);
    12b2:	01 e0       	ldi	r16, 0x01	; 1
    12b4:	21 e0       	ldi	r18, 0x01	; 1
    12b6:	4c e9       	ldi	r20, 0x9C	; 156
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0e 94 57 06 	call	0xcae	; 0xcae <draw_string>
    12c2:	2f ef       	ldi	r18, 0xFF	; 255
    12c4:	81 ee       	ldi	r24, 0xE1	; 225
    12c6:	94 e0       	ldi	r25, 0x04	; 4
    12c8:	21 50       	subi	r18, 0x01	; 1
    12ca:	80 40       	sbci	r24, 0x00	; 0
    12cc:	90 40       	sbci	r25, 0x00	; 0
    12ce:	e1 f7       	brne	.-8      	; 0x12c8 <sketch+0xa6>
    12d0:	00 c0       	rjmp	.+0      	; 0x12d2 <sketch+0xb0>
    12d2:	00 00       	nop
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <sketch+0xb8>
				_delay_ms(200);
			}
		}
		
		// Get user input
		if(potentiometer_input) {
    12d6:	00 23       	and	r16, r16
    12d8:	49 f0       	breq	.+18     	; 0x12ec <sketch+0xca>
			get_touch_coordinates_pots(&sketch_x, &sketch_y);
    12da:	be 01       	movw	r22, r28
    12dc:	6f 5f       	subi	r22, 0xFF	; 255
    12de:	7f 4f       	sbci	r23, 0xFF	; 255
    12e0:	ce 01       	movw	r24, r28
    12e2:	02 96       	adiw	r24, 0x02	; 2
    12e4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <get_touch_coordinates_pots>
    12e8:	01 e0       	ldi	r16, 0x01	; 1
    12ea:	19 c0       	rjmp	.+50     	; 0x131e <sketch+0xfc>
		} else {
			if(button_timer > BUTTON_TIMER_COUNT) {				
    12ec:	15 30       	cpi	r17, 0x05	; 5
    12ee:	a8 f0       	brcs	.+42     	; 0x131a <sketch+0xf8>
				// Get input from button interrupt
				if(BUTTON_UP) sketch_y -= 1;
    12f0:	87 99       	sbic	0x10, 7	; 16
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <sketch+0xd8>
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	81 50       	subi	r24, 0x01	; 1
    12f8:	89 83       	std	Y+1, r24	; 0x01
				if(BUTTON_DOWN) sketch_y += 1;
    12fa:	85 99       	sbic	0x10, 5	; 16
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <sketch+0xe2>
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	8f 5f       	subi	r24, 0xFF	; 255
    1302:	89 83       	std	Y+1, r24	; 0x01
				if(BUTTON_LEFT) sketch_x -= 1;
    1304:	86 99       	sbic	0x10, 6	; 16
    1306:	03 c0       	rjmp	.+6      	; 0x130e <sketch+0xec>
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	81 50       	subi	r24, 0x01	; 1
    130c:	8a 83       	std	Y+2, r24	; 0x02
				if(BUTTON_RIGHT) sketch_x += 1;
    130e:	84 99       	sbic	0x10, 4	; 16
    1310:	03 c0       	rjmp	.+6      	; 0x1318 <sketch+0xf6>
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	8f 5f       	subi	r24, 0xFF	; 255
    1316:	8a 83       	std	Y+2, r24	; 0x02
				
				button_timer = 0;
    1318:	10 e0       	ldi	r17, 0x00	; 0
			}			
			button_timer++;
    131a:	1f 5f       	subi	r17, 0xFF	; 255
    131c:	00 e0       	ldi	r16, 0x00	; 0
		}
		
		// Check display limits
		if(sketch_x >= SKETCH_MAX_X) sketch_x = SKETCH_MAX_X;
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	85 36       	cpi	r24, 0x65	; 101
    1322:	08 f0       	brcs	.+2      	; 0x1326 <sketch+0x104>
    1324:	da 82       	std	Y+2, r13	; 0x02
		if(sketch_x <= SKETCH_MIN_X+1) sketch_x = SKETCH_MIN_X+1;
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	82 30       	cpi	r24, 0x02	; 2
    132a:	10 f4       	brcc	.+4      	; 0x1330 <sketch+0x10e>
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	8a 83       	std	Y+2, r24	; 0x02
		if(sketch_y >= SKETCH_MAX_Y) sketch_y = SKETCH_MAX_Y;
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	8f 33       	cpi	r24, 0x3F	; 63
    1334:	08 f0       	brcs	.+2      	; 0x1338 <sketch+0x116>
    1336:	c9 82       	std	Y+1, r12	; 0x01
		if(sketch_y <= SKETCH_MIN_Y+1) sketch_y = SKETCH_MIN_Y+1;
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	82 30       	cpi	r24, 0x02	; 2
    133c:	10 f4       	brcc	.+4      	; 0x1342 <sketch+0x120>
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	89 83       	std	Y+1, r24	; 0x01
		if(sketch_y > SKETCH_MAX_Y) sketch_y = SKETCH_MIN_Y;
		if(sketch_y <= SKETCH_MIN_Y) sketch_y = SKETCH_MAX_Y;
		*/
		
		// Set modified bit in FRAM LCD buffer
		buffer_set_bit(sketch_x, sketch_y, SKETCH_FRAME);
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	69 81       	ldd	r22, Y+1	; 0x01
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
    134c:	8f e7       	ldi	r24, 0x7F	; 127
    134e:	9e e3       	ldi	r25, 0x3E	; 62
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <sketch+0x12e>
    1354:	00 c0       	rjmp	.+0      	; 0x1356 <sketch+0x134>
    1356:	00 00       	nop
		
		// DEBUG
		//draw_number(50, 0, sketch_x, 3, SKETCH_FRAME);
		//draw_number(50, 1, sketch_y, 3, SKETCH_FRAME);
		
		send_buffer_page(SKETCH_FRAME);
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <send_buffer_page>
	} // End Main Sketch loop
    135e:	7a cf       	rjmp	.-268    	; 0x1254 <sketch+0x32>

00001360 <snake_init>:
	}
}

// Start snake at center of screen, with tail trailing to the left
static void snake_init() {
	snake_length = STARTING_LENGTH;
    1360:	84 e0       	ldi	r24, 0x04	; 4
    1362:	80 93 ca 00 	sts	0x00CA, r24
	score = 0;
    1366:	10 92 c7 00 	sts	0x00C7, r1
    136a:	10 92 c6 00 	sts	0x00C6, r1
	x_vel = SNAKE_START_X_VELOCITY;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	80 93 64 00 	sts	0x0064, r24
	y_vel = SNAKE_START_Y_VELOCITY;
    1374:	10 92 c5 00 	sts	0x00C5, r1
	
	// Set initial position of head, define positions of next (length-1) segments
	uint8_t i;
	
	// Head starting position
	segments[HEAD][CURX] = SNAKE_START_X; // Previous x position
    1378:	83 e3       	ldi	r24, 0x33	; 51
    137a:	80 93 cb 00 	sts	0x00CB, r24
	segments[HEAD][CURY] = SNAKE_START_Y; // Previous y position
    137e:	80 e2       	ldi	r24, 0x20	; 32
    1380:	80 93 cc 00 	sts	0x00CC, r24
    1384:	e0 ed       	ldi	r30, 0xD0	; 208
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	8d ef       	ldi	r24, 0xFD	; 253
    138a:	df 01       	movw	r26, r30
    138c:	11 97       	sbiw	r26, 0x01	; 1
	
	// Set tail trailing to the left
	for(i = 1; i < snake_length; i++) {
		segments[i][CURX] = segments[HEAD][CURX] - (i*SNAKE_WIDTH);
    138e:	90 91 cb 00 	lds	r25, 0x00CB
    1392:	98 0f       	add	r25, r24
    1394:	9c 93       	st	X, r25
		segments[i][CURY] = segments[HEAD][CURY];
    1396:	90 91 cc 00 	lds	r25, 0x00CC
    139a:	90 83       	st	Z, r25
    139c:	83 50       	subi	r24, 0x03	; 3
    139e:	34 96       	adiw	r30, 0x04	; 4
	// Head starting position
	segments[HEAD][CURX] = SNAKE_START_X; // Previous x position
	segments[HEAD][CURY] = SNAKE_START_Y; // Previous y position
	
	// Set tail trailing to the left
	for(i = 1; i < snake_length; i++) {
    13a0:	84 3f       	cpi	r24, 0xF4	; 244
    13a2:	99 f7       	brne	.-26     	; 0x138a <snake_init+0x2a>
		segments[i][CURX] = segments[HEAD][CURX] - (i*SNAKE_WIDTH);
		segments[i][CURY] = segments[HEAD][CURY];
	}
}
    13a4:	08 95       	ret

000013a6 <food_update>:
/* Update the position of the food using random numbers */
static void food_update() {
	// rand() generates an integer in the range [0, RAND_MAX], where
	// RAND_MAX is defined in stdlib.h as 0x7FFF = 32767
	
	food[CURX] = rand()/FOOD_RAND_DIVISOR_X + FOOD_WIDTH;
    13a6:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <rand>
    13aa:	64 e4       	ldi	r22, 0x44	; 68
    13ac:	71 e0       	ldi	r23, 0x01	; 1
    13ae:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__divmodhi4>
    13b2:	6d 5f       	subi	r22, 0xFD	; 253
    13b4:	60 93 c8 00 	sts	0x00C8, r22
	food[CURY] = rand()/FOOD_RAND_DIVISOR_Y + SCORE_TEXT_HEIGHT - FOOD_WIDTH;
    13b8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <rand>
    13bc:	69 e4       	ldi	r22, 0x49	; 73
    13be:	72 e0       	ldi	r23, 0x02	; 2
    13c0:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__divmodhi4>
    13c4:	6c 5f       	subi	r22, 0xFC	; 252
    13c6:	60 93 c9 00 	sts	0x00C9, r22
	
	// Check display limits just in case
	if(food[CURX] < FOOD_MIN_X) food[CURX] = FOOD_MIN_X + FOOD_WIDTH;
    13ca:	80 91 c8 00 	lds	r24, 0x00C8
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	18 f4       	brcc	.+6      	; 0x13d8 <food_update+0x32>
    13d2:	86 e0       	ldi	r24, 0x06	; 6
    13d4:	80 93 c8 00 	sts	0x00C8, r24
	if(food[CURY] < FOOD_MIN_Y) food[CURY] = FOOD_MIN_Y + FOOD_WIDTH;
    13d8:	6a 30       	cpi	r22, 0x0A	; 10
    13da:	18 f4       	brcc	.+6      	; 0x13e2 <food_update+0x3c>
    13dc:	8d e0       	ldi	r24, 0x0D	; 13
    13de:	80 93 c9 00 	sts	0x00C9, r24
	if(food[CURX] >= FOOD_MAX_X) food[CURX] = FOOD_MAX_X - FOOD_WIDTH;
    13e2:	80 91 c8 00 	lds	r24, 0x00C8
    13e6:	82 36       	cpi	r24, 0x62	; 98
    13e8:	18 f0       	brcs	.+6      	; 0x13f0 <food_update+0x4a>
    13ea:	8f e5       	ldi	r24, 0x5F	; 95
    13ec:	80 93 c8 00 	sts	0x00C8, r24
	if(food[CURY] >= FOOD_MAX_Y) food[CURY] = FOOD_MAX_Y - FOOD_WIDTH;
    13f0:	80 91 c9 00 	lds	r24, 0x00C9
    13f4:	8c 33       	cpi	r24, 0x3C	; 60
    13f6:	18 f0       	brcs	.+6      	; 0x13fe <food_update+0x58>
    13f8:	89 e3       	ldi	r24, 0x39	; 57
    13fa:	80 93 c9 00 	sts	0x00C9, r24
    13fe:	08 95       	ret

00001400 <food_draw_to_buffer>:
				
	return FALSE;	
}

// Reference top left corner of food
static void food_draw_to_buffer() {
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
	buffer_set_bit(food[CURX] + 1, food[CURY], SNAKE_FRAME);
    1408:	09 ec       	ldi	r16, 0xC9	; 201
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	c8 ec       	ldi	r28, 0xC8	; 200
    140e:	d0 e0       	ldi	r29, 0x00	; 0
    1410:	88 81       	ld	r24, Y
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	f8 01       	movw	r30, r16
    1416:	60 81       	ld	r22, Z
    1418:	8f 5f       	subi	r24, 0xFF	; 255
    141a:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(food[CURX] + 1, food[CURY] + 1, SNAKE_FRAME);
    141e:	f8 01       	movw	r30, r16
    1420:	60 81       	ld	r22, Z
    1422:	6f 5f       	subi	r22, 0xFF	; 255
    1424:	88 81       	ld	r24, Y
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	8f 5f       	subi	r24, 0xFF	; 255
    142a:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(food[CURX] + 1, food[CURY] + 2, SNAKE_FRAME);
    142e:	f8 01       	movw	r30, r16
    1430:	60 81       	ld	r22, Z
    1432:	6e 5f       	subi	r22, 0xFE	; 254
    1434:	88 81       	ld	r24, Y
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	8f 5f       	subi	r24, 0xFF	; 255
    143a:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(food[CURX], food[CURY] + 1, SNAKE_FRAME);
    143e:	f8 01       	movw	r30, r16
    1440:	60 81       	ld	r22, Z
    1442:	6f 5f       	subi	r22, 0xFF	; 255
    1444:	40 e0       	ldi	r20, 0x00	; 0
    1446:	88 81       	ld	r24, Y
    1448:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	buffer_set_bit(food[CURX] + 2, food[CURY] + 1, SNAKE_FRAME);
    144c:	f8 01       	movw	r30, r16
    144e:	60 81       	ld	r22, Z
    1450:	6f 5f       	subi	r22, 0xFF	; 255
    1452:	88 81       	ld	r24, Y
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	8e 5f       	subi	r24, 0xFE	; 254
}
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
static void food_draw_to_buffer() {
	buffer_set_bit(food[CURX] + 1, food[CURY], SNAKE_FRAME);
	buffer_set_bit(food[CURX] + 1, food[CURY] + 1, SNAKE_FRAME);
	buffer_set_bit(food[CURX] + 1, food[CURY] + 2, SNAKE_FRAME);
	buffer_set_bit(food[CURX], food[CURY] + 1, SNAKE_FRAME);
	buffer_set_bit(food[CURX] + 2, food[CURY] + 1, SNAKE_FRAME);
    1460:	0c 94 dd 07 	jmp	0xfba	; 0xfba <buffer_set_bit>

00001464 <draw_score_to_buffer>:
	for(i = 1; i < snake_length; i++) {
		snake_draw_segment(segments[i][CURX], segments[i][CURY], SNAKE_FRAME);
	}
}

static void draw_score_to_buffer(uint16_t score) {
    1464:	ef 92       	push	r14
    1466:	0f 93       	push	r16
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
	uint8_t score_col = (SCREEN_WIDTH/2) - ((score_text_len + NUM_SCORE_DIGITS)*CHARACTER_WIDTH)/2;
	draw_string(score_col, PAGE_0, score_text, score_text_len, SNAKE_FRAME);
    146e:	00 e0       	ldi	r16, 0x00	; 0
    1470:	27 e0       	ldi	r18, 0x07	; 7
    1472:	4a eb       	ldi	r20, 0xBA	; 186
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	8c e0       	ldi	r24, 0x0C	; 12
    147a:	0e 94 57 06 	call	0xcae	; 0xcae <draw_string>
	draw_number(DIGITS_OFFSET*CHARACTER_WIDTH, PAGE_0, score, NUM_SCORE_DIGITS, SNAKE_FRAME);
    147e:	9e 01       	movw	r18, r28
    1480:	40 e0       	ldi	r20, 0x00	; 0
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	e1 2c       	mov	r14, r1
    1486:	06 e0       	ldi	r16, 0x06	; 6
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	80 e3       	ldi	r24, 0x30	; 48
    148c:	0e 94 a0 06 	call	0xd40	; 0xd40 <draw_number>
}
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	0f 91       	pop	r16
    1496:	ef 90       	pop	r14
    1498:	08 95       	ret

0000149a <snake_draw_to_buffer>:
	buffer_clear_bit(food[CURX], food[CURY] + 1, SNAKE_FRAME);
	buffer_clear_bit(food[CURX] + 2, food[CURY] + 1, SNAKE_FRAME);
}

// Draws the snake in the LCD buffer stored in FRAM
void snake_draw_to_buffer(int8_t x_vel, int8_t y_vel) {
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <snake_draw_to_buffer+0xe>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	98 2f       	mov	r25, r24
    14ae:	26 2f       	mov	r18, r22
	uint8_t i;

	// Draw head separately
	snake_draw_head(segments[HEAD][CURX], segments[HEAD][CURY], x_vel, y_vel, SNAKE_FRAME);
    14b0:	e0 90 cc 00 	lds	r14, 0x00CC
    14b4:	f0 90 cb 00 	lds	r15, 0x00CB
 * draw_head, clear_head
 * pass in buffer_set_bit() or buffer_clear_bit() functions to
 * either draw or clear the segment/head */
static void snake_draw_head(uint8_t x, uint8_t y, int8_t x_vel, int8_t y_vel, uint8_t buffer) {
	// Common pixel is in the center
	buffer_set_bit(x+1, y+1, buffer);
    14b8:	01 e0       	ldi	r16, 0x01	; 1
    14ba:	0e 0d       	add	r16, r14
    14bc:	11 e0       	ldi	r17, 0x01	; 1
    14be:	1f 0d       	add	r17, r15
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	60 2f       	mov	r22, r16
    14c4:	81 2f       	mov	r24, r17
    14c6:	2a 83       	std	Y+2, r18	; 0x02
    14c8:	99 83       	std	Y+1, r25	; 0x01
    14ca:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
	
	if(x_vel != 0) {
    14ce:	99 81       	ldd	r25, Y+1	; 0x01
    14d0:	2a 81       	ldd	r18, Y+2	; 0x02
    14d2:	99 23       	and	r25, r25
    14d4:	b1 f0       	breq	.+44     	; 0x1502 <snake_draw_to_buffer+0x68>
		switch(x_vel) {
    14d6:	9f 3f       	cpi	r25, 0xFF	; 255
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <snake_draw_to_buffer+0x46>
    14da:	91 30       	cpi	r25, 0x01	; 1
    14dc:	19 f0       	breq	.+6      	; 0x14e4 <snake_draw_to_buffer+0x4a>
    14de:	28 c0       	rjmp	.+80     	; 0x1530 <snake_draw_to_buffer+0x96>
			case MOVE_LEFT:
			buffer_set_bit(x+2, y, buffer);
    14e0:	f3 94       	inc	r15
    14e2:	f3 94       	inc	r15
			buffer_set_bit(x+2, y+1, buffer);
			buffer_set_bit(x+2, y+2, buffer);
			break;
			case MOVE_RIGHT:
			buffer_set_bit(x, y, buffer);
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	6e 2d       	mov	r22, r14
    14e8:	8f 2d       	mov	r24, r15
    14ea:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
			buffer_set_bit(x, y+1, buffer);
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	60 2f       	mov	r22, r16
    14f2:	8f 2d       	mov	r24, r15
    14f4:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
			buffer_set_bit(x, y+2, buffer);
    14f8:	62 e0       	ldi	r22, 0x02	; 2
    14fa:	6e 0d       	add	r22, r14
    14fc:	40 e0       	ldi	r20, 0x00	; 0
    14fe:	8f 2d       	mov	r24, r15
    1500:	15 c0       	rjmp	.+42     	; 0x152c <snake_draw_to_buffer+0x92>
			break;
		}
		return;
	}
	
	switch(y_vel) {
    1502:	2f 3f       	cpi	r18, 0xFF	; 255
    1504:	19 f0       	breq	.+6      	; 0x150c <snake_draw_to_buffer+0x72>
    1506:	21 30       	cpi	r18, 0x01	; 1
    1508:	19 f0       	breq	.+6      	; 0x1510 <snake_draw_to_buffer+0x76>
    150a:	12 c0       	rjmp	.+36     	; 0x1530 <snake_draw_to_buffer+0x96>
		case MOVE_UP:
			buffer_set_bit(x, y+2, buffer);
    150c:	e3 94       	inc	r14
    150e:	e3 94       	inc	r14
			buffer_set_bit(x+1, y+2, buffer);
			buffer_set_bit(x+2, y+2, buffer);
			break;
		case MOVE_DOWN:
			buffer_set_bit(x, y, buffer);
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	6e 2d       	mov	r22, r14
    1514:	8f 2d       	mov	r24, r15
    1516:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
			buffer_set_bit(x+1, y, buffer);
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	6e 2d       	mov	r22, r14
    151e:	81 2f       	mov	r24, r17
    1520:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
			buffer_set_bit(x+2, y, buffer);
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	6e 2d       	mov	r22, r14
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	8f 0d       	add	r24, r15
    152c:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>

// Referencing top left corner of image
static void snake_draw_segment(uint8_t x, uint8_t y, uint8_t buffer) {
	uint8_t i, j;
	
	for(i = 0; i < SNAKE_WIDTH; i++) {
    1530:	11 e0       	ldi	r17, 0x01	; 1

	// Draw head separately
	snake_draw_head(segments[HEAD][CURX], segments[HEAD][CURY], x_vel, y_vel, SNAKE_FRAME);

	// For each segment of the snake
	for(i = 1; i < snake_length; i++) {
    1532:	80 91 ca 00 	lds	r24, 0x00CA
    1536:	18 17       	cp	r17, r24
    1538:	10 f5       	brcc	.+68     	; 0x157e <snake_draw_to_buffer+0xe4>
		snake_draw_segment(segments[i][CURX], segments[i][CURY], SNAKE_FRAME);
    153a:	84 e0       	ldi	r24, 0x04	; 4
    153c:	18 9f       	mul	r17, r24
    153e:	f0 01       	movw	r30, r0
    1540:	11 24       	eor	r1, r1
    1542:	e5 53       	subi	r30, 0x35	; 53
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	e1 80       	ldd	r14, Z+1	; 0x01
    1548:	f0 80       	ld	r15, Z

// Referencing top left corner of image
static void snake_draw_segment(uint8_t x, uint8_t y, uint8_t buffer) {
	uint8_t i, j;
	
	for(i = 0; i < SNAKE_WIDTH; i++) {
    154a:	90 e0       	ldi	r25, 0x00	; 0
	buffer_clear_bit(food[CURX], food[CURY] + 1, SNAKE_FRAME);
	buffer_clear_bit(food[CURX] + 2, food[CURY] + 1, SNAKE_FRAME);
}

// Draws the snake in the LCD buffer stored in FRAM
void snake_draw_to_buffer(int8_t x_vel, int8_t y_vel) {
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	09 2f       	mov	r16, r25
    1550:	0f 0d       	add	r16, r15
static void snake_draw_segment(uint8_t x, uint8_t y, uint8_t buffer) {
	uint8_t i, j;
	
	for(i = 0; i < SNAKE_WIDTH; i++) {
		for(j = 0; j < SNAKE_WIDTH; j++) {
			if(i == 1 && j == 1) continue; // leave centre pixel blank for contrast
    1552:	91 30       	cpi	r25, 0x01	; 1
    1554:	11 f4       	brne	.+4      	; 0x155a <snake_draw_to_buffer+0xc0>
    1556:	21 30       	cpi	r18, 0x01	; 1
    1558:	51 f0       	breq	.+20     	; 0x156e <snake_draw_to_buffer+0xd4>
			buffer_set_bit(x+i, y+j, buffer);
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	62 2f       	mov	r22, r18
    155e:	6e 0d       	add	r22, r14
    1560:	80 2f       	mov	r24, r16
    1562:	2a 83       	std	Y+2, r18	; 0x02
    1564:	99 83       	std	Y+1, r25	; 0x01
    1566:	0e 94 dd 07 	call	0xfba	; 0xfba <buffer_set_bit>
    156a:	99 81       	ldd	r25, Y+1	; 0x01
    156c:	2a 81       	ldd	r18, Y+2	; 0x02
// Referencing top left corner of image
static void snake_draw_segment(uint8_t x, uint8_t y, uint8_t buffer) {
	uint8_t i, j;
	
	for(i = 0; i < SNAKE_WIDTH; i++) {
		for(j = 0; j < SNAKE_WIDTH; j++) {
    156e:	2f 5f       	subi	r18, 0xFF	; 255
    1570:	23 30       	cpi	r18, 0x03	; 3
    1572:	79 f7       	brne	.-34     	; 0x1552 <snake_draw_to_buffer+0xb8>

// Referencing top left corner of image
static void snake_draw_segment(uint8_t x, uint8_t y, uint8_t buffer) {
	uint8_t i, j;
	
	for(i = 0; i < SNAKE_WIDTH; i++) {
    1574:	9f 5f       	subi	r25, 0xFF	; 255
    1576:	93 30       	cpi	r25, 0x03	; 3
    1578:	49 f7       	brne	.-46     	; 0x154c <snake_draw_to_buffer+0xb2>

	// Draw head separately
	snake_draw_head(segments[HEAD][CURX], segments[HEAD][CURY], x_vel, y_vel, SNAKE_FRAME);

	// For each segment of the snake
	for(i = 1; i < snake_length; i++) {
    157a:	1f 5f       	subi	r17, 0xFF	; 255
    157c:	da cf       	rjmp	.-76     	; 0x1532 <snake_draw_to_buffer+0x98>
		snake_draw_segment(segments[i][CURX], segments[i][CURY], SNAKE_FRAME);
	}
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	08 95       	ret

00001590 <snake>:
//   1 right
// Begin game moving to the right
static int8_t x_vel = 1,
			  y_vel = 0;

void snake() {
    1590:	bf 92       	push	r11
    1592:	cf 92       	push	r12
    1594:	df 92       	push	r13
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
	/* Initialise snake position, player score and food */	
	buffer_clear(SNAKE_FRAME);
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	0e 94 c0 07 	call	0xf80	; 0xf80 <buffer_clear>
	snake_init(); // Place the snake at the starting position
    15a8:	0e 94 b0 09 	call	0x1360	; 0x1360 <snake_init>
	food_update(); // Place first piece of food
    15ac:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <food_update>
	snake_draw_to_buffer(x_vel, y_vel);
    15b0:	60 91 c5 00 	lds	r22, 0x00C5
    15b4:	80 91 64 00 	lds	r24, 0x0064
    15b8:	0e 94 4d 0a 	call	0x149a	; 0x149a <snake_draw_to_buffer>
	food_draw_to_buffer();
    15bc:	0e 94 00 0a 	call	0x1400	; 0x1400 <food_draw_to_buffer>
	draw_score_to_buffer(score);
    15c0:	80 91 c6 00 	lds	r24, 0x00C6
    15c4:	90 91 c7 00 	lds	r25, 0x00C7
    15c8:	0e 94 32 0a 	call	0x1464	; 0x1464 <draw_score_to_buffer>
	send_buffer_all(SNAKE_FRAME);
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	0e 94 db 08 	call	0x11b6	; 0x11b6 <send_buffer_all>
	
	// New seed for food position
	// Reading the battery level should be random enough
	// Ideally use something that changes each runtime
	srand(get_battery_level());
    15d2:	0e 94 4c 03 	call	0x698	; 0x698 <get_battery_level>
    15d6:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <srand>
    15da:	2f ef       	ldi	r18, 0xFF	; 255
    15dc:	49 e6       	ldi	r20, 0x69	; 105
    15de:	88 e1       	ldi	r24, 0x18	; 24
    15e0:	21 50       	subi	r18, 0x01	; 1
    15e2:	40 40       	sbci	r20, 0x00	; 0
    15e4:	80 40       	sbci	r24, 0x00	; 0
    15e6:	e1 f7       	brne	.-8      	; 0x15e0 <snake+0x50>
    15e8:	00 c0       	rjmp	.+0      	; 0x15ea <snake+0x5a>
    15ea:	00 00       	nop
		// Check if head is over a piece of food
		if(snake_is_eating()) {
			snake_length++;
			// Check length, restrict if necessary
			if(snake_length > SNAKE_MAX_LENGTH) {
				snake_length = SNAKE_MAX_LENGTH;
    15ec:	8d e7       	ldi	r24, 0x7D	; 125
    15ee:	e8 2e       	mov	r14, r24
	// Clear end segment from the buffer as the snake will move
	snake_clear_segment(segments[snake_length-1][CURX], segments[snake_length-1][CURY], SNAKE_FRAME);
	
	// Update segment positions
	uint8_t i;
	for(i = 1; i < snake_length; i++) {
    15f0:	11 e0       	ldi	r17, 0x01	; 1
	if(BUTTON_LEFT) {
		// If user inputs left
		// And current movement is up or down
		if(*y_vel > 0 || *y_vel < 0) {
			*y_vel = 0; // stop vertical movement
			*x_vel = MOVE_LEFT; // Start snake moving to the left
    15f2:	ff 24       	eor	r15, r15
    15f4:	fa 94       	dec	r15
// Check if the head of the snake is over a piece of food 
static uint8_t snake_is_eating() {
	/* Check if centers of the head block and the food block
	 * are within two pixels of each other. This implies that some
	 * portion of them are overlapping, constituting 'eating'. */
	if( segments[HEAD][CURX] < (food[CURX] + FOOD_WIDTH) &&
    15f6:	80 91 c8 00 	lds	r24, 0x00C8
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 91 cb 00 	lds	r20, 0x00CB
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	b9 01       	movw	r22, r18
    1606:	6e 5f       	subi	r22, 0xFE	; 254
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	64 17       	cp	r22, r20
    160c:	75 07       	cpc	r23, r21
    160e:	0c f4       	brge	.+2      	; 0x1612 <snake+0x82>
    1610:	53 c0       	rjmp	.+166    	; 0x16b8 <snake+0x128>
	   (segments[HEAD][CURX] + SNAKE_WIDTH) >= food[CURX] &&
    1612:	4d 5f       	subi	r20, 0xFD	; 253
    1614:	5f 4f       	sbci	r21, 0xFF	; 255
// Check if the head of the snake is over a piece of food 
static uint8_t snake_is_eating() {
	/* Check if centers of the head block and the food block
	 * are within two pixels of each other. This implies that some
	 * portion of them are overlapping, constituting 'eating'. */
	if( segments[HEAD][CURX] < (food[CURX] + FOOD_WIDTH) &&
    1616:	42 17       	cp	r20, r18
    1618:	53 07       	cpc	r21, r19
    161a:	0c f4       	brge	.+2      	; 0x161e <snake+0x8e>
    161c:	4d c0       	rjmp	.+154    	; 0x16b8 <snake+0x128>
	   (segments[HEAD][CURX] + SNAKE_WIDTH) >= food[CURX] &&
	    segments[HEAD][CURY] < (food[CURY] + FOOD_WIDTH) &&
    161e:	60 91 c9 00 	lds	r22, 0x00C9
    1622:	26 2f       	mov	r18, r22
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 91 cc 00 	lds	r20, 0x00CC
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	f9 01       	movw	r30, r18
    162e:	32 96       	adiw	r30, 0x02	; 2
static uint8_t snake_is_eating() {
	/* Check if centers of the head block and the food block
	 * are within two pixels of each other. This implies that some
	 * portion of them are overlapping, constituting 'eating'. */
	if( segments[HEAD][CURX] < (food[CURX] + FOOD_WIDTH) &&
	   (segments[HEAD][CURX] + SNAKE_WIDTH) >= food[CURX] &&
    1630:	e4 17       	cp	r30, r20
    1632:	f5 07       	cpc	r31, r21
    1634:	0c f4       	brge	.+2      	; 0x1638 <snake+0xa8>
    1636:	40 c0       	rjmp	.+128    	; 0x16b8 <snake+0x128>
	    segments[HEAD][CURY] < (food[CURY] + FOOD_WIDTH) &&
	   (segments[HEAD][CURY] + SNAKE_WIDTH) >= food[CURY] ) {
    1638:	4d 5f       	subi	r20, 0xFD	; 253
    163a:	5f 4f       	sbci	r21, 0xFF	; 255
	/* Check if centers of the head block and the food block
	 * are within two pixels of each other. This implies that some
	 * portion of them are overlapping, constituting 'eating'. */
	if( segments[HEAD][CURX] < (food[CURX] + FOOD_WIDTH) &&
	   (segments[HEAD][CURX] + SNAKE_WIDTH) >= food[CURX] &&
	    segments[HEAD][CURY] < (food[CURY] + FOOD_WIDTH) &&
    163c:	42 17       	cp	r20, r18
    163e:	53 07       	cpc	r21, r19
    1640:	dc f1       	brlt	.+118    	; 0x16b8 <snake+0x128>
		
		button_timer++;
				
		// Check if head is over a piece of food
		if(snake_is_eating()) {
			snake_length++;
    1642:	90 91 ca 00 	lds	r25, 0x00CA
    1646:	9f 5f       	subi	r25, 0xFF	; 255
			// Check length, restrict if necessary
			if(snake_length > SNAKE_MAX_LENGTH) {
    1648:	9e 37       	cpi	r25, 0x7E	; 126
    164a:	08 f4       	brcc	.+2      	; 0x164e <snake+0xbe>
    164c:	1a c1       	rjmp	.+564    	; 0x1882 <snake+0x2f2>
				snake_length = SNAKE_MAX_LENGTH;
    164e:	e0 92 ca 00 	sts	0x00CA, r14
			}
			
			score += SCORE_INCREMENT;
    1652:	20 91 c6 00 	lds	r18, 0x00C6
    1656:	30 91 c7 00 	lds	r19, 0x00C7
    165a:	2e 52       	subi	r18, 0x2E	; 46
    165c:	3b 4f       	sbci	r19, 0xFB	; 251
    165e:	30 93 c7 00 	sts	0x00C7, r19
    1662:	20 93 c6 00 	sts	0x00C6, r18
	buffer_set_bit(food[CURX], food[CURY] + 1, SNAKE_FRAME);
	buffer_set_bit(food[CURX] + 2, food[CURY] + 1, SNAKE_FRAME);
}

static void food_clear_from_buffer() {
	buffer_clear_bit(food[CURX] + 1, food[CURY], SNAKE_FRAME);
    1666:	40 e0       	ldi	r20, 0x00	; 0
    1668:	8f 5f       	subi	r24, 0xFF	; 255
    166a:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
	buffer_clear_bit(food[CURX] + 1, food[CURY] + 1, SNAKE_FRAME);
    166e:	60 91 c9 00 	lds	r22, 0x00C9
    1672:	6f 5f       	subi	r22, 0xFF	; 255
    1674:	80 91 c8 00 	lds	r24, 0x00C8
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	8f 5f       	subi	r24, 0xFF	; 255
    167c:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
	buffer_clear_bit(food[CURX] + 1, food[CURY] + 2, SNAKE_FRAME);
    1680:	60 91 c9 00 	lds	r22, 0x00C9
    1684:	6e 5f       	subi	r22, 0xFE	; 254
    1686:	80 91 c8 00 	lds	r24, 0x00C8
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	8f 5f       	subi	r24, 0xFF	; 255
    168e:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
	buffer_clear_bit(food[CURX], food[CURY] + 1, SNAKE_FRAME);
    1692:	60 91 c9 00 	lds	r22, 0x00C9
    1696:	6f 5f       	subi	r22, 0xFF	; 255
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	80 91 c8 00 	lds	r24, 0x00C8
    169e:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
	buffer_clear_bit(food[CURX] + 2, food[CURY] + 1, SNAKE_FRAME);
    16a2:	60 91 c9 00 	lds	r22, 0x00C9
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	80 91 c8 00 	lds	r24, 0x00C8
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	8e 5f       	subi	r24, 0xFE	; 254
    16b0:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
			
			// Remove old food
			food_clear_from_buffer();
			
			// New food position
			food_update();
    16b4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <food_update>
		}	

		snake_update(x_vel, y_vel);
    16b8:	d0 90 c5 00 	lds	r13, 0x00C5
    16bc:	00 91 64 00 	lds	r16, 0x0064
/* Update the position of all snake segments */
static void snake_update(int8_t x_vel, int8_t y_vel) {
	/* Each iteration, clear the bit at the last segments old position
	 * (before the update) */
	
	segments[HEAD][PREV_X] = segments[HEAD][CURX];
    16c0:	c0 91 cb 00 	lds	r28, 0x00CB
    16c4:	c0 93 cd 00 	sts	0x00CD, r28
	segments[HEAD][PREV_Y] = segments[HEAD][CURY];
    16c8:	d0 91 cc 00 	lds	r29, 0x00CC
    16cc:	d0 93 ce 00 	sts	0x00CE, r29
	}	
}

static void snake_clear_head(uint8_t x, uint8_t y, int8_t x_vel, int8_t y_vel, uint8_t buffer) {
	// Common pixel is in the center
	buffer_clear_bit(x+1, y+1, buffer);
    16d0:	bb 24       	eor	r11, r11
    16d2:	b3 94       	inc	r11
    16d4:	bd 0e       	add	r11, r29
    16d6:	cc 24       	eor	r12, r12
    16d8:	c3 94       	inc	r12
    16da:	cc 0e       	add	r12, r28
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	6b 2d       	mov	r22, r11
    16e0:	8c 2d       	mov	r24, r12
    16e2:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
	
	if(x_vel != 0) {
    16e6:	00 23       	and	r16, r16
    16e8:	a9 f0       	breq	.+42     	; 0x1714 <snake+0x184>
		switch(x_vel) {
    16ea:	0f 3f       	cpi	r16, 0xFF	; 255
    16ec:	19 f0       	breq	.+6      	; 0x16f4 <snake+0x164>
    16ee:	01 30       	cpi	r16, 0x01	; 1
    16f0:	11 f0       	breq	.+4      	; 0x16f6 <snake+0x166>
    16f2:	28 c0       	rjmp	.+80     	; 0x1744 <snake+0x1b4>
			case MOVE_LEFT:
			buffer_clear_bit(x+2, y, buffer);
    16f4:	ce 5f       	subi	r28, 0xFE	; 254
			buffer_clear_bit(x+2, y+1, buffer);
			buffer_clear_bit(x+2, y+2, buffer);
			break;
			case MOVE_RIGHT:
			buffer_clear_bit(x, y, buffer);
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	6d 2f       	mov	r22, r29
    16fa:	8c 2f       	mov	r24, r28
    16fc:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
			buffer_clear_bit(x, y+1, buffer);
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	6b 2d       	mov	r22, r11
    1704:	8c 2f       	mov	r24, r28
    1706:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
			buffer_clear_bit(x, y+2, buffer);
    170a:	62 e0       	ldi	r22, 0x02	; 2
    170c:	6d 0f       	add	r22, r29
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	8c 2f       	mov	r24, r28
    1712:	16 c0       	rjmp	.+44     	; 0x1740 <snake+0x1b0>
			break;
		}
		return;
	}
	
	switch(y_vel) {
    1714:	9f ef       	ldi	r25, 0xFF	; 255
    1716:	d9 16       	cp	r13, r25
    1718:	21 f0       	breq	.+8      	; 0x1722 <snake+0x192>
    171a:	a1 e0       	ldi	r26, 0x01	; 1
    171c:	da 16       	cp	r13, r26
    171e:	11 f0       	breq	.+4      	; 0x1724 <snake+0x194>
    1720:	11 c0       	rjmp	.+34     	; 0x1744 <snake+0x1b4>
		case MOVE_UP:
		buffer_clear_bit(x, y+2, buffer);
    1722:	de 5f       	subi	r29, 0xFE	; 254
		buffer_clear_bit(x+1, y+2, buffer);
		buffer_clear_bit(x+2, y+2, buffer);
		break;
		case MOVE_DOWN:
		buffer_clear_bit(x, y, buffer);
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	6d 2f       	mov	r22, r29
    1728:	8c 2f       	mov	r24, r28
    172a:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
		buffer_clear_bit(x+1, y, buffer);
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	6d 2f       	mov	r22, r29
    1732:	8c 2d       	mov	r24, r12
    1734:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
		buffer_clear_bit(x+2, y, buffer);
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	6d 2f       	mov	r22, r29
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	8c 0f       	add	r24, r28
    1740:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
	segments[HEAD][PREV_X] = segments[HEAD][CURX];
	segments[HEAD][PREV_Y] = segments[HEAD][CURY];
	snake_clear_head(segments[HEAD][CURX], segments[HEAD][CURY], x_vel, y_vel, SNAKE_FRAME);
	
	// Update head position with velocities
	segments[HEAD][CURX] += x_vel*SNAKE_WIDTH;
    1744:	80 2f       	mov	r24, r16
    1746:	88 0f       	add	r24, r24
    1748:	80 0f       	add	r24, r16
    174a:	90 91 cb 00 	lds	r25, 0x00CB
    174e:	89 0f       	add	r24, r25
    1750:	80 93 cb 00 	sts	0x00CB, r24
	segments[HEAD][CURY] += y_vel*SNAKE_WIDTH;
    1754:	8d 2d       	mov	r24, r13
    1756:	88 0f       	add	r24, r24
    1758:	8d 0d       	add	r24, r13
    175a:	90 91 cc 00 	lds	r25, 0x00CC
    175e:	89 0f       	add	r24, r25
    1760:	80 93 cc 00 	sts	0x00CC, r24
	
	// Clear end segment from the buffer as the snake will move
	snake_clear_segment(segments[snake_length-1][CURX], segments[snake_length-1][CURY], SNAKE_FRAME);
    1764:	e0 91 ca 00 	lds	r30, 0x00CA
    1768:	b4 e0       	ldi	r27, 0x04	; 4
    176a:	eb 9f       	mul	r30, r27
    176c:	f0 01       	movw	r30, r0
    176e:	11 24       	eor	r1, r1
    1770:	e9 53       	subi	r30, 0x39	; 57
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	c1 80       	ldd	r12, Z+1	; 0x01
    1776:	d0 80       	ld	r13, Z

// Referencing top left corner of image
static void snake_clear_segment(uint8_t x, uint8_t y, uint8_t buffer) {
	uint8_t i, j;
	
	for(i = 0; i < SNAKE_WIDTH; i++) {
    1778:	c0 e0       	ldi	r28, 0x00	; 0
//   1 right
// Begin game moving to the right
static int8_t x_vel = 1,
			  y_vel = 0;

void snake() {
    177a:	d0 e0       	ldi	r29, 0x00	; 0
    177c:	0c 2f       	mov	r16, r28
    177e:	0d 0d       	add	r16, r13
static void snake_clear_segment(uint8_t x, uint8_t y, uint8_t buffer) {
	uint8_t i, j;
	
	for(i = 0; i < SNAKE_WIDTH; i++) {
		for(j = 0; j < SNAKE_WIDTH; j++) {
			if(i == 1 && j == 1) continue; // leave center pixel blank for contrast
    1780:	c1 30       	cpi	r28, 0x01	; 1
    1782:	11 f4       	brne	.+4      	; 0x1788 <snake+0x1f8>
    1784:	d1 30       	cpi	r29, 0x01	; 1
    1786:	31 f0       	breq	.+12     	; 0x1794 <snake+0x204>
			buffer_clear_bit(x+i, y+j, buffer);
    1788:	40 e0       	ldi	r20, 0x00	; 0
    178a:	6d 2f       	mov	r22, r29
    178c:	6c 0d       	add	r22, r12
    178e:	80 2f       	mov	r24, r16
    1790:	0e 94 36 08 	call	0x106c	; 0x106c <buffer_clear_bit>
// Referencing top left corner of image
static void snake_clear_segment(uint8_t x, uint8_t y, uint8_t buffer) {
	uint8_t i, j;
	
	for(i = 0; i < SNAKE_WIDTH; i++) {
		for(j = 0; j < SNAKE_WIDTH; j++) {
    1794:	df 5f       	subi	r29, 0xFF	; 255
    1796:	d3 30       	cpi	r29, 0x03	; 3
    1798:	99 f7       	brne	.-26     	; 0x1780 <snake+0x1f0>

// Referencing top left corner of image
static void snake_clear_segment(uint8_t x, uint8_t y, uint8_t buffer) {
	uint8_t i, j;
	
	for(i = 0; i < SNAKE_WIDTH; i++) {
    179a:	cf 5f       	subi	r28, 0xFF	; 255
    179c:	c3 30       	cpi	r28, 0x03	; 3
    179e:	69 f7       	brne	.-38     	; 0x177a <snake+0x1ea>
	// Clear end segment from the buffer as the snake will move
	snake_clear_segment(segments[snake_length-1][CURX], segments[snake_length-1][CURY], SNAKE_FRAME);
	
	// Update segment positions
	uint8_t i;
	for(i = 1; i < snake_length; i++) {
    17a0:	30 91 ca 00 	lds	r19, 0x00CA
    17a4:	cf ec       	ldi	r28, 0xCF	; 207
    17a6:	d0 e0       	ldi	r29, 0x00	; 0
    17a8:	60 ed       	ldi	r22, 0xD0	; 208
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	e2 ed       	ldi	r30, 0xD2	; 210
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	21 e0       	ldi	r18, 0x01	; 1
    17b2:	23 17       	cp	r18, r19
    17b4:	c8 f4       	brcc	.+50     	; 0x17e8 <snake+0x258>
		
		// Store previous positions
		segments[i][PREV_X] = segments[i][CURX]; // Prev_x = current_x
    17b6:	48 81       	ld	r20, Y
    17b8:	cf 01       	movw	r24, r30
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	dc 01       	movw	r26, r24
    17be:	4c 93       	st	X, r20
		segments[i][PREV_Y] = segments[i][CURY]; // Prev_y = current_y
    17c0:	db 01       	movw	r26, r22
    17c2:	8c 91       	ld	r24, X
    17c4:	80 83       	st	Z, r24
    17c6:	cf 01       	movw	r24, r30
    17c8:	05 97       	sbiw	r24, 0x05	; 5

		// Get new segment position from old position of segment in front
		segments[i][CURX] = segments[i-1][PREV_X];
    17ca:	dc 01       	movw	r26, r24
    17cc:	8c 91       	ld	r24, X
    17ce:	88 83       	st	Y, r24
    17d0:	cf 01       	movw	r24, r30
    17d2:	04 97       	sbiw	r24, 0x04	; 4
		segments[i][CURY] = segments[i-1][PREV_Y];
    17d4:	dc 01       	movw	r26, r24
    17d6:	8c 91       	ld	r24, X
    17d8:	db 01       	movw	r26, r22
    17da:	8c 93       	st	X, r24
	// Clear end segment from the buffer as the snake will move
	snake_clear_segment(segments[snake_length-1][CURX], segments[snake_length-1][CURY], SNAKE_FRAME);
	
	// Update segment positions
	uint8_t i;
	for(i = 1; i < snake_length; i++) {
    17dc:	2f 5f       	subi	r18, 0xFF	; 255
    17de:	24 96       	adiw	r28, 0x04	; 4
    17e0:	6c 5f       	subi	r22, 0xFC	; 252
    17e2:	7f 4f       	sbci	r23, 0xFF	; 255
    17e4:	34 96       	adiw	r30, 0x04	; 4
    17e6:	e5 cf       	rjmp	.-54     	; 0x17b2 <snake+0x222>
			// New food position
			food_update();
		}	

		snake_update(x_vel, y_vel);
		snake_draw_to_buffer(x_vel, y_vel);
    17e8:	60 91 c5 00 	lds	r22, 0x00C5
    17ec:	80 91 64 00 	lds	r24, 0x0064
    17f0:	0e 94 4d 0a 	call	0x149a	; 0x149a <snake_draw_to_buffer>
		food_draw_to_buffer();
    17f4:	0e 94 00 0a 	call	0x1400	; 0x1400 <food_draw_to_buffer>
		draw_score_to_buffer(score);
    17f8:	80 91 c6 00 	lds	r24, 0x00C6
    17fc:	90 91 c7 00 	lds	r25, 0x00C7
    1800:	0e 94 32 0a 	call	0x1464	; 0x1464 <draw_score_to_buffer>
static uint8_t snake_self_collision() {	
	// Head can't collide with 1st, 2nd segment or 3rd segment
	// can only overlap minimum of fourth segment
	uint8_t i;

	for(i = SNAKE_COLLIDE_MIN; i <= snake_length; i++) {
    1804:	30 91 ca 00 	lds	r19, 0x00CA
		if(segments[HEAD][CURX] == segments[i][CURX] &&
    1808:	90 91 cb 00 	lds	r25, 0x00CB
		   segments[HEAD][CURY] == segments[i][CURY]) {
    180c:	20 91 cc 00 	lds	r18, 0x00CC
static uint8_t snake_self_collision() {	
	// Head can't collide with 1st, 2nd segment or 3rd segment
	// can only overlap minimum of fourth segment
	uint8_t i;

	for(i = SNAKE_COLLIDE_MIN; i <= snake_length; i++) {
    1810:	85 e0       	ldi	r24, 0x05	; 5
    1812:	38 17       	cp	r19, r24
    1814:	70 f0       	brcs	.+28     	; 0x1832 <snake+0x2a2>
		if(segments[HEAD][CURX] == segments[i][CURX] &&
    1816:	b4 e0       	ldi	r27, 0x04	; 4
    1818:	8b 9f       	mul	r24, r27
    181a:	f0 01       	movw	r30, r0
    181c:	11 24       	eor	r1, r1
    181e:	e5 53       	subi	r30, 0x35	; 53
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	40 81       	ld	r20, Z
    1824:	94 13       	cpse	r25, r20
    1826:	03 c0       	rjmp	.+6      	; 0x182e <snake+0x29e>
    1828:	41 81       	ldd	r20, Z+1	; 0x01
    182a:	24 17       	cp	r18, r20
    182c:	41 f0       	breq	.+16     	; 0x183e <snake+0x2ae>
static uint8_t snake_self_collision() {	
	// Head can't collide with 1st, 2nd segment or 3rd segment
	// can only overlap minimum of fourth segment
	uint8_t i;

	for(i = SNAKE_COLLIDE_MIN; i <= snake_length; i++) {
    182e:	8f 5f       	subi	r24, 0xFF	; 255
    1830:	f0 cf       	rjmp	.-32     	; 0x1812 <snake+0x282>
}

/* Returns TRUE if the snake has collided with the game walls */
static uint8_t snake_boundary_collision() {
	if(segments[HEAD][CURX] + SNAKE_WIDTH >= SNAKE_MAX_X) return TRUE;
	if(segments[HEAD][CURX] <= SNAKE_MIN_X) return TRUE;
    1832:	91 50       	subi	r25, 0x01	; 1
    1834:	92 36       	cpi	r25, 0x62	; 98
    1836:	18 f4       	brcc	.+6      	; 0x183e <snake+0x2ae>
	if(segments[HEAD][CURY] + SNAKE_WIDTH >= SNAKE_MAX_Y) return TRUE;
	if(segments[HEAD][CURY] <= SNAKE_MIN_Y) return TRUE;
    1838:	28 50       	subi	r18, 0x08	; 8
    183a:	25 33       	cpi	r18, 0x35	; 53
    183c:	b0 f1       	brcs	.+108    	; 0x18aa <snake+0x31a>
		food_draw_to_buffer();
		draw_score_to_buffer(score);
				
		// Check if the snake has collided with itself or the game limits
		if(snake_self_collision() || snake_boundary_collision()) {
			lcd_invert_flash();
    183e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <lcd_invert_flash>
*/
uint8_t play_again_menu(void) {	
	/* Prompt to play again */
	uint8_t prompt_col = (SCREEN_WIDTH/2) - (play_again_text_len*CHARACTER_WIDTH)/2;
	uint8_t select_col = (SCREEN_WIDTH/2) - (choice_text_len*CHARACTER_WIDTH)/2;
	draw_string(prompt_col, PAGE_2, play_again_text, play_again_text_len, SNAKE_FRAME); // play again prompt
    1842:	00 e0       	ldi	r16, 0x00	; 0
    1844:	2b e0       	ldi	r18, 0x0B	; 11
    1846:	4e ea       	ldi	r20, 0xAE	; 174
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	62 e0       	ldi	r22, 0x02	; 2
    184c:	82 e1       	ldi	r24, 0x12	; 18
    184e:	0e 94 57 06 	call	0xcae	; 0xcae <draw_string>
	draw_string(select_col, PAGE_4, choice_text, choice_text_len, SNAKE_FRAME);
    1852:	2f e0       	ldi	r18, 0x0F	; 15
    1854:	4e e9       	ldi	r20, 0x9E	; 158
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	64 e0       	ldi	r22, 0x04	; 4
    185a:	86 e0       	ldi	r24, 0x06	; 6
    185c:	0e 94 57 06 	call	0xcae	; 0xcae <draw_string>
	send_buffer_all(SNAKE_FRAME);
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	0e 94 db 08 	call	0x11b6	; 0x11b6 <send_buffer_all>
	
	while(1) {
		// Get user input
		if(BUTTON_A1) {
    1866:	83 9b       	sbis	0x10, 3	; 16
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <snake+0x2f8>
			return TRUE;
		}
		
		if(BUTTON_A2) {
    186a:	81 99       	sbic	0x10, 1	; 16
    186c:	fc cf       	rjmp	.-8      	; 0x1866 <snake+0x2d6>
		send_buffer_all(SNAKE_FRAME);
		
		_delay_ms(SNAKE_DIFFICULTY_MS);
		
	}	
}
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
    1878:	ef 90       	pop	r14
    187a:	df 90       	pop	r13
    187c:	cf 90       	pop	r12
    187e:	bf 90       	pop	r11
    1880:	08 95       	ret
		
		button_timer++;
				
		// Check if head is over a piece of food
		if(snake_is_eating()) {
			snake_length++;
    1882:	90 93 ca 00 	sts	0x00CA, r25
    1886:	e5 ce       	rjmp	.-566    	; 0x1652 <snake+0xc2>
			lcd_invert_flash();
			
			if(play_again_menu()) {
				// Clear the screen and 
				// re-enter the main loop
				buffer_clear(SNAKE_FRAME);
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	0e 94 c0 07 	call	0xf80	; 0xf80 <buffer_clear>
				send_buffer_all(SNAKE_FRAME);
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	0e 94 db 08 	call	0x11b6	; 0x11b6 <send_buffer_all>
				snake_init();
    1894:	0e 94 b0 09 	call	0x1360	; 0x1360 <snake_init>
    1898:	9f ef       	ldi	r25, 0xFF	; 255
    189a:	a9 e6       	ldi	r26, 0x69	; 105
    189c:	b8 e1       	ldi	r27, 0x18	; 24
    189e:	91 50       	subi	r25, 0x01	; 1
    18a0:	a0 40       	sbci	r26, 0x00	; 0
    18a2:	b0 40       	sbci	r27, 0x00	; 0
    18a4:	e1 f7       	brne	.-8      	; 0x189e <snake+0x30e>
    18a6:	00 c0       	rjmp	.+0      	; 0x18a8 <snake+0x318>
    18a8:	00 00       	nop
			} else {
				break;
			}
		}
		
		send_buffer_all(SNAKE_FRAME);
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	0e 94 db 08 	call	0x11b6	; 0x11b6 <send_buffer_all>
    18b0:	2f ef       	ldi	r18, 0xFF	; 255
    18b2:	46 e7       	ldi	r20, 0x76	; 118
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	21 50       	subi	r18, 0x01	; 1
    18b8:	40 40       	sbci	r20, 0x00	; 0
    18ba:	80 40       	sbci	r24, 0x00	; 0
    18bc:	e1 f7       	brne	.-8      	; 0x18b6 <snake+0x326>
    18be:	00 c0       	rjmp	.+0      	; 0x18c0 <snake+0x330>
    18c0:	00 00       	nop
/* Get button input.
 * This functions reads in all button presses, but only changes the 
 * direction of the snake if it is a valid direction.
 * ie: if the snake is moving right, it can not instantly start moving left. */
static void get_user_input(int8_t* x_vel, int8_t* y_vel) {
	if(BUTTON_LEFT) {
    18c2:	86 99       	sbic	0x10, 6	; 16
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <snake+0x348>
		// If user inputs left
		// And current movement is up or down
		if(*y_vel > 0 || *y_vel < 0) {
    18c6:	80 91 c5 00 	lds	r24, 0x00C5
    18ca:	88 23       	and	r24, r24
    18cc:	79 f0       	breq	.+30     	; 0x18ec <snake+0x35c>
			*y_vel = 0; // stop vertical movement
    18ce:	10 92 c5 00 	sts	0x00C5, r1
			*x_vel = MOVE_LEFT; // Start snake moving to the left
    18d2:	f0 92 64 00 	sts	0x0064, r15
    18d6:	0a c0       	rjmp	.+20     	; 0x18ec <snake+0x35c>
		}
	} else {
		if(BUTTON_RIGHT) {
    18d8:	84 99       	sbic	0x10, 4	; 16
    18da:	08 c0       	rjmp	.+16     	; 0x18ec <snake+0x35c>
			// If user inputs right
			// And current movement is up or down
			if(*y_vel > 0 || *y_vel < 0) {
    18dc:	80 91 c5 00 	lds	r24, 0x00C5
    18e0:	88 23       	and	r24, r24
    18e2:	21 f0       	breq	.+8      	; 0x18ec <snake+0x35c>
				*y_vel = 0; // stop vertical movement
    18e4:	10 92 c5 00 	sts	0x00C5, r1
				*x_vel = MOVE_RIGHT; // Start snake moving right
    18e8:	10 93 64 00 	sts	0x0064, r17
			}
		}
	}
	
	if(BUTTON_DOWN) {
    18ec:	85 99       	sbic	0x10, 5	; 16
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <snake+0x372>
		// If user inputs down
		// And current movement is left or right
		if(*x_vel > 0 || *x_vel < 0) {
    18f0:	80 91 64 00 	lds	r24, 0x0064
    18f4:	88 23       	and	r24, r24
    18f6:	79 f0       	breq	.+30     	; 0x1916 <snake+0x386>
			*x_vel = 0; // stop horizontal movement
    18f8:	10 92 64 00 	sts	0x0064, r1
			*y_vel = MOVE_DOWN; // Start snake moving down
    18fc:	10 93 c5 00 	sts	0x00C5, r17
    1900:	0a c0       	rjmp	.+20     	; 0x1916 <snake+0x386>
		}
	} else {
		if(BUTTON_UP) {
    1902:	87 99       	sbic	0x10, 7	; 16
    1904:	08 c0       	rjmp	.+16     	; 0x1916 <snake+0x386>
			// If user inputs up
			// And current movement is left or right
			if(*x_vel > 0 || *x_vel < 0) {
    1906:	80 91 64 00 	lds	r24, 0x0064
    190a:	88 23       	and	r24, r24
    190c:	21 f0       	breq	.+8      	; 0x1916 <snake+0x386>
				*x_vel = 0; // stop horizontal movement
    190e:	10 92 64 00 	sts	0x0064, r1
				*y_vel = MOVE_UP; // Start snake moving up
    1912:	f0 92 c5 00 	sts	0x00C5, r15
	while(1) {
		if(button_timer) {
			get_user_input(&x_vel, &y_vel);
			
			// Check if the user wants to quit
			if(BUTTON_A2) {
    1916:	81 99       	sbic	0x10, 1	; 16
    1918:	6e ce       	rjmp	.-804    	; 0x15f6 <snake+0x66>
				buffer_clear(SNAKE_FRAME);
    191a:	80 e0       	ldi	r24, 0x00	; 0
		send_buffer_all(SNAKE_FRAME);
		
		_delay_ms(SNAKE_DIFFICULTY_MS);
		
	}	
}
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	df 90       	pop	r13
    192a:	cf 90       	pop	r12
    192c:	bf 90       	pop	r11
		if(button_timer) {
			get_user_input(&x_vel, &y_vel);
			
			// Check if the user wants to quit
			if(BUTTON_A2) {
				buffer_clear(SNAKE_FRAME);
    192e:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <buffer_clear>

00001932 <spi_init>:
/* Initialises the SPI data and clock lines.
   The uC is set as the master, peripherals (RAM, LCD) are slaves */
void spi_init() {
		// SPI Clock and SPI MOSI as outputs
		// SPI MISO auto configured as input
		SPI_DIR_PORT |= _BV(SPI_CLK) | _BV(SPI_MOSI);
    1932:	87 b3       	in	r24, 0x17	; 23
    1934:	80 6a       	ori	r24, 0xA0	; 160
    1936:	87 bb       	out	0x17, r24	; 23
		
		// Set SS pin as output for proper Master operation
		SPI_DIR_PORT |= _BV(SPI_SS);
    1938:	bc 9a       	sbi	0x17, 4	; 23
		
		SPCR |= _BV(SPE) | _BV(MSTR); // Enable SPI, Configure Atmega16 as Master,
    193a:	8d b1       	in	r24, 0x0d	; 13
    193c:	80 65       	ori	r24, 0x50	; 80
    193e:	8d b9       	out	0x0d, r24	; 13
		//SPCR |= _BV(SPR1) | _BV(SPR0); // Fosc / 128
				
		SPSR |= _BV(SPI2X); 		  // Double SCK frequency		
    1940:	70 9a       	sbi	0x0e, 0	; 14
		
		// Setting correct SPI mode for test LCD communication
		// SPI mode 3
		SPCR |= _BV(CPOL) | _BV(CPHA);
    1942:	8d b1       	in	r24, 0x0d	; 13
    1944:	8c 60       	ori	r24, 0x0C	; 12
    1946:	8d b9       	out	0x0d, r24	; 13
    1948:	08 95       	ret

0000194a <spi_transmit>:
}

/* Transmits one byte over SPI. */
uint8_t spi_transmit(uint8_t data) {
		// Writing to the SPDR register automatically starts transmission
		SPDR = data;
    194a:	8f b9       	out	0x0f, r24	; 15
		
		// Wait for the transmission to complete.
		while(!(SPSR & _BV(SPIF)));
    194c:	77 9b       	sbis	0x0e, 7	; 14
    194e:	fe cf       	rjmp	.-4      	; 0x194c <spi_transmit+0x2>
		
		return SPDR;
    1950:	8f b1       	in	r24, 0x0f	; 15
    1952:	08 95       	ret

00001954 <lcd_reset>:
	lcd_send_command(0xAF);//Display on
}

/* Toggles the LCD RESET pin to reset the LCD */
void lcd_reset() {
	LCD_RESET_PORT &= ~_BV(LCD_RESET_PIN);
    1954:	af 98       	cbi	0x15, 7	; 21
    1956:	8f e1       	ldi	r24, 0x1F	; 31
    1958:	9e e4       	ldi	r25, 0x4E	; 78
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <lcd_reset+0x6>
    195e:	00 c0       	rjmp	.+0      	; 0x1960 <lcd_reset+0xc>
    1960:	00 00       	nop
	_delay_ms(10); // just to be safe
	LCD_RESET_PORT |= _BV(LCD_RESET_PIN);
    1962:	af 9a       	sbi	0x15, 7	; 21
    1964:	08 95       	ret

00001966 <lcd_enable_command>:
	lcd_disable();
}

/* Set appropriate pins for sending commands to the LCD */
void lcd_enable_command() {
	LCD_COMMAND_PORT &= ~_BV(LCD_COMMAND_PIN);
    1966:	a8 98       	cbi	0x15, 0	; 21
	LCD_CHIP_SELECT_PORT &= ~_BV(LCD_CHIP_SELECT_PIN);	
    1968:	c4 98       	cbi	0x18, 4	; 24
    196a:	08 95       	ret

0000196c <lcd_enable_data>:
}

/* Set appropriate pins for sending data to the LCD */
void lcd_enable_data() {
	LCD_COMMAND_PORT |= _BV(LCD_COMMAND_PIN);
    196c:	a8 9a       	sbi	0x15, 0	; 21
	LCD_CHIP_SELECT_PORT &= ~_BV(LCD_CHIP_SELECT_PIN);	
    196e:	c4 98       	cbi	0x18, 4	; 24
    1970:	08 95       	ret

00001972 <lcd_disable>:
}

void lcd_disable() {
	LCD_CHIP_SELECT_PORT |= _BV(LCD_CHIP_SELECT_PIN);
    1972:	c4 9a       	sbi	0x18, 4	; 24
    1974:	08 95       	ret

00001976 <lcd_send_command>:
void lcd_set_column(uint8_t column) {
	lcd_send_command(LCD_COL_MSB | (((column + COLUMN_OFFSET) >> 4) & LOW_NIBBLE)); //MSB
	lcd_send_command(LCD_COL_LSB | ((column + COLUMN_OFFSET) & LOW_NIBBLE)); // LSB
}

void lcd_send_command(uint8_t command) {
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	1f 92       	push	r1
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
	lcd_enable_command();
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	0e 94 b3 0c 	call	0x1966	; 0x1966 <lcd_enable_command>
	spi_transmit(command);
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	0e 94 a5 0c 	call	0x194a	; 0x194a <spi_transmit>
	lcd_disable();
}
    198c:	0f 90       	pop	r0
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
}

void lcd_send_command(uint8_t command) {
	lcd_enable_command();
	spi_transmit(command);
	lcd_disable();
    1992:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <lcd_disable>

00001996 <lcd_init>:
/* Sets up the communication pins for the LCD and
 * sends initialisation codes to the LCD for correct operation.
 * This includes a RESET pin toggle to reset the LCD. */
void lcd_init() {
	// Setup input/output pins for LCD
	LCD_COMMAND_PORT_DIR |= _BV(LCD_COMMAND_PIN);
    1996:	a0 9a       	sbi	0x14, 0	; 20
	LCD_CHIP_SELECT_PORT_DIR |= _BV(LCD_CHIP_SELECT_PIN);
    1998:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RESET_PORT_DIR |= _BV(LCD_RESET_PIN);
    199a:	a7 9a       	sbi	0x14, 7	; 20
	
	// Disable LCD from receiving data
	LCD_COMMAND_PORT |= _BV(LCD_COMMAND_PIN);
    199c:	a8 9a       	sbi	0x15, 0	; 21
	LCD_CHIP_SELECT_PORT |= _BV(LCD_CHIP_SELECT_PIN);
    199e:	c4 9a       	sbi	0x18, 4	; 24
	LCD_RESET_PORT |= _BV(LCD_RESET_PIN);
    19a0:	af 9a       	sbi	0x15, 7	; 21
	
	lcd_reset(); 
    19a2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <lcd_reset>

	// Send setup codes to the LCD
	lcd_send_command(0x40);//Display start line 0
    19a6:	80 e4       	ldi	r24, 0x40	; 64
    19a8:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
	lcd_send_command(0xA0);//SEG direction for 12 o'clock view
    19ac:	80 ea       	ldi	r24, 0xA0	; 160
    19ae:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
	lcd_send_command(0xC8);//COM direction reverse COM63 - COM0
    19b2:	88 ec       	ldi	r24, 0xC8	; 200
    19b4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
	lcd_send_command(0xA4);//Disable -> Set All Pixel to ON
    19b8:	84 ea       	ldi	r24, 0xA4	; 164
    19ba:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
	lcd_send_command(0xA6);//Display inverse off
    19be:	86 ea       	ldi	r24, 0xA6	; 166
    19c0:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
    19c4:	2f ef       	ldi	r18, 0xFF	; 255
    19c6:	8d ee       	ldi	r24, 0xED	; 237
    19c8:	92 e0       	ldi	r25, 0x02	; 2
    19ca:	21 50       	subi	r18, 0x01	; 1
    19cc:	80 40       	sbci	r24, 0x00	; 0
    19ce:	90 40       	sbci	r25, 0x00	; 0
    19d0:	e1 f7       	brne	.-8      	; 0x19ca <lcd_init+0x34>
    19d2:	00 c0       	rjmp	.+0      	; 0x19d4 <lcd_init+0x3e>
    19d4:	00 00       	nop
	_delay_ms(120);
	lcd_send_command(0xA2);//Set LCD Bias Ratio A2/A3
    19d6:	82 ea       	ldi	r24, 0xA2	; 162
    19d8:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
	lcd_send_command(0x2F);//Set Power Control 28...2F
    19dc:	8f e2       	ldi	r24, 0x2F	; 47
    19de:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
	lcd_send_command(0x27);//Set VLCD Resistor Ratio 20...27
    19e2:	87 e2       	ldi	r24, 0x27	; 39
    19e4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
	lcd_send_command(0x81);//Set Electronic Volume
    19e8:	81 e8       	ldi	r24, 0x81	; 129
    19ea:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
	lcd_send_command(0x10);//Set Electronic Volume 00...3F
    19ee:	80 e1       	ldi	r24, 0x10	; 16
    19f0:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
	lcd_send_command(0xFA);//Set Adv. Program Control
    19f4:	8a ef       	ldi	r24, 0xFA	; 250
    19f6:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
	lcd_send_command(0x90);//Set Adv. Program Control x00100yz yz column wrap x Temp Comp
    19fa:	80 e9       	ldi	r24, 0x90	; 144
    19fc:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
	lcd_send_command(0xAF);//Display on
    1a00:	8f ea       	ldi	r24, 0xAF	; 175
    1a02:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <lcd_send_command>

00001a06 <lcd_set_page>:
	}	
}

// Chooses page to write data to
void lcd_set_page(uint8_t page) {
	lcd_send_command(LCD_PAGE_COMMAND | page);
    1a06:	80 6b       	ori	r24, 0xB0	; 176
    1a08:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <lcd_send_command>

00001a0c <lcd_set_column>:
}

// Chooses column to write data to
void lcd_set_column(uint8_t column) {
    1a0c:	cf 93       	push	r28
    1a0e:	c8 2f       	mov	r28, r24
	lcd_send_command(LCD_COL_MSB | (((column + COLUMN_OFFSET) >> 4) & LOW_NIBBLE)); //MSB
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	22 5e       	subi	r18, 0xE2	; 226
    1a16:	3f 4f       	sbci	r19, 0xFF	; 255
    1a18:	84 e0       	ldi	r24, 0x04	; 4
    1a1a:	35 95       	asr	r19
    1a1c:	27 95       	ror	r18
    1a1e:	8a 95       	dec	r24
    1a20:	e1 f7       	brne	.-8      	; 0x1a1a <lcd_set_column+0xe>
    1a22:	82 2f       	mov	r24, r18
    1a24:	8f 70       	andi	r24, 0x0F	; 15
    1a26:	80 61       	ori	r24, 0x10	; 16
    1a28:	0e 94 bb 0c 	call	0x1976	; 0x1976 <lcd_send_command>
	lcd_send_command(LCD_COL_LSB | ((column + COLUMN_OFFSET) & LOW_NIBBLE)); // LSB
    1a2c:	8e e1       	ldi	r24, 0x1E	; 30
    1a2e:	8c 0f       	add	r24, r28
    1a30:	8f 70       	andi	r24, 0x0F	; 15
}
    1a32:	cf 91       	pop	r28
}

// Chooses column to write data to
void lcd_set_column(uint8_t column) {
	lcd_send_command(LCD_COL_MSB | (((column + COLUMN_OFFSET) >> 4) & LOW_NIBBLE)); //MSB
	lcd_send_command(LCD_COL_LSB | ((column + COLUMN_OFFSET) & LOW_NIBBLE)); // LSB
    1a34:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <lcd_send_command>

00001a38 <lcd_send_data>:
	lcd_enable_command();
	spi_transmit(command);
	lcd_disable();
}

void lcd_send_data(uint8_t data) {
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	1f 92       	push	r1
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
	lcd_enable_data();
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	0e 94 b6 0c 	call	0x196c	; 0x196c <lcd_enable_data>
	spi_transmit(data);
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	0e 94 a5 0c 	call	0x194a	; 0x194a <spi_transmit>
	lcd_disable();
}
    1a4e:	0f 90       	pop	r0
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
}

void lcd_send_data(uint8_t data) {
	lcd_enable_data();
	spi_transmit(data);
	lcd_disable();
    1a54:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <lcd_disable>

00001a58 <lcd_screen_clear>:
	_delay_ms(10); // just to be safe
	LCD_RESET_PORT |= _BV(LCD_RESET_PIN);
}

/* Clears the screen. Does not alter the buffers. */
void lcd_screen_clear() {
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
	uint8_t page, column;
	for(page = 0; page < NUM_PAGES; page++) {
    1a5c:	c0 e0       	ldi	r28, 0x00	; 0
		lcd_set_page(page);
    1a5e:	8c 2f       	mov	r24, r28
    1a60:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <lcd_set_page>
		for(column = 0; column < NUM_COLUMNS; column++) {
    1a64:	d0 e0       	ldi	r29, 0x00	; 0
			lcd_set_column(column);
    1a66:	8d 2f       	mov	r24, r29
    1a68:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_set_column>
			lcd_send_data(0x00); // clear data
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <lcd_send_data>
/* Clears the screen. Does not alter the buffers. */
void lcd_screen_clear() {
	uint8_t page, column;
	for(page = 0; page < NUM_PAGES; page++) {
		lcd_set_page(page);
		for(column = 0; column < NUM_COLUMNS; column++) {
    1a72:	df 5f       	subi	r29, 0xFF	; 255
    1a74:	d6 36       	cpi	r29, 0x66	; 102
    1a76:	b9 f7       	brne	.-18     	; 0x1a66 <lcd_screen_clear+0xe>
}

/* Clears the screen. Does not alter the buffers. */
void lcd_screen_clear() {
	uint8_t page, column;
	for(page = 0; page < NUM_PAGES; page++) {
    1a78:	cf 5f       	subi	r28, 0xFF	; 255
    1a7a:	c8 30       	cpi	r28, 0x08	; 8
    1a7c:	81 f7       	brne	.-32     	; 0x1a5e <lcd_screen_clear+0x6>
		for(column = 0; column < NUM_COLUMNS; column++) {
			lcd_set_column(column);
			lcd_send_data(0x00); // clear data
		}
	}	
}
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	08 95       	ret

00001a84 <lcd_set_display_inverse>:
	lcd_set_display_normal();
}

// LCD to show inverse SRAM content
void lcd_set_display_inverse() {
	lcd_send_command(LCD_INVERT_DISPLAY);
    1a84:	87 ea       	ldi	r24, 0xA7	; 167
    1a86:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <lcd_send_command>

00001a8a <lcd_set_display_normal>:
}

// LCD to show normal SRAM content
void lcd_set_display_normal() {
	lcd_send_command(LCD_NORMAL_DISPLAY);
    1a8a:	86 ea       	ldi	r24, 0xA6	; 166
    1a8c:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <lcd_send_command>

00001a90 <lcd_invert_flash>:
	LCD_CHIP_SELECT_PORT |= _BV(LCD_CHIP_SELECT_PIN);
}

// Flash display twice
void lcd_invert_flash() {
	lcd_set_display_inverse();
    1a90:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <lcd_set_display_inverse>
    1a94:	2f ef       	ldi	r18, 0xFF	; 255
    1a96:	80 e7       	ldi	r24, 0x70	; 112
    1a98:	92 e0       	ldi	r25, 0x02	; 2
    1a9a:	21 50       	subi	r18, 0x01	; 1
    1a9c:	80 40       	sbci	r24, 0x00	; 0
    1a9e:	90 40       	sbci	r25, 0x00	; 0
    1aa0:	e1 f7       	brne	.-8      	; 0x1a9a <lcd_invert_flash+0xa>
    1aa2:	00 c0       	rjmp	.+0      	; 0x1aa4 <lcd_invert_flash+0x14>
    1aa4:	00 00       	nop
	_delay_ms(FLASH_TIME);
	lcd_set_display_normal();
    1aa6:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <lcd_set_display_normal>
    1aaa:	2f ef       	ldi	r18, 0xFF	; 255
    1aac:	80 e7       	ldi	r24, 0x70	; 112
    1aae:	92 e0       	ldi	r25, 0x02	; 2
    1ab0:	21 50       	subi	r18, 0x01	; 1
    1ab2:	80 40       	sbci	r24, 0x00	; 0
    1ab4:	90 40       	sbci	r25, 0x00	; 0
    1ab6:	e1 f7       	brne	.-8      	; 0x1ab0 <lcd_invert_flash+0x20>
    1ab8:	00 c0       	rjmp	.+0      	; 0x1aba <lcd_invert_flash+0x2a>
    1aba:	00 00       	nop
	_delay_ms(FLASH_TIME);
	lcd_set_display_inverse();
    1abc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <lcd_set_display_inverse>
    1ac0:	2f ef       	ldi	r18, 0xFF	; 255
    1ac2:	80 e7       	ldi	r24, 0x70	; 112
    1ac4:	92 e0       	ldi	r25, 0x02	; 2
    1ac6:	21 50       	subi	r18, 0x01	; 1
    1ac8:	80 40       	sbci	r24, 0x00	; 0
    1aca:	90 40       	sbci	r25, 0x00	; 0
    1acc:	e1 f7       	brne	.-8      	; 0x1ac6 <lcd_invert_flash+0x36>
    1ace:	00 c0       	rjmp	.+0      	; 0x1ad0 <lcd_invert_flash+0x40>
    1ad0:	00 00       	nop
	_delay_ms(FLASH_TIME);
	lcd_set_display_normal();
    1ad2:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <lcd_set_display_normal>

00001ad6 <__udivmodhi4>:
    1ad6:	aa 1b       	sub	r26, r26
    1ad8:	bb 1b       	sub	r27, r27
    1ada:	51 e1       	ldi	r21, 0x11	; 17
    1adc:	07 c0       	rjmp	.+14     	; 0x1aec <__udivmodhi4_ep>

00001ade <__udivmodhi4_loop>:
    1ade:	aa 1f       	adc	r26, r26
    1ae0:	bb 1f       	adc	r27, r27
    1ae2:	a6 17       	cp	r26, r22
    1ae4:	b7 07       	cpc	r27, r23
    1ae6:	10 f0       	brcs	.+4      	; 0x1aec <__udivmodhi4_ep>
    1ae8:	a6 1b       	sub	r26, r22
    1aea:	b7 0b       	sbc	r27, r23

00001aec <__udivmodhi4_ep>:
    1aec:	88 1f       	adc	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	5a 95       	dec	r21
    1af2:	a9 f7       	brne	.-22     	; 0x1ade <__udivmodhi4_loop>
    1af4:	80 95       	com	r24
    1af6:	90 95       	com	r25
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	08 95       	ret

00001afe <__divmodhi4>:
    1afe:	97 fb       	bst	r25, 7
    1b00:	07 2e       	mov	r0, r23
    1b02:	16 f4       	brtc	.+4      	; 0x1b08 <__divmodhi4+0xa>
    1b04:	00 94       	com	r0
    1b06:	07 d0       	rcall	.+14     	; 0x1b16 <__divmodhi4_neg1>
    1b08:	77 fd       	sbrc	r23, 7
    1b0a:	09 d0       	rcall	.+18     	; 0x1b1e <__divmodhi4_neg2>
    1b0c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__udivmodhi4>
    1b10:	07 fc       	sbrc	r0, 7
    1b12:	05 d0       	rcall	.+10     	; 0x1b1e <__divmodhi4_neg2>
    1b14:	3e f4       	brtc	.+14     	; 0x1b24 <__divmodhi4_exit>

00001b16 <__divmodhi4_neg1>:
    1b16:	90 95       	com	r25
    1b18:	81 95       	neg	r24
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	08 95       	ret

00001b1e <__divmodhi4_neg2>:
    1b1e:	70 95       	com	r23
    1b20:	61 95       	neg	r22
    1b22:	7f 4f       	sbci	r23, 0xFF	; 255

00001b24 <__divmodhi4_exit>:
    1b24:	08 95       	ret

00001b26 <__udivmodsi4>:
    1b26:	a1 e2       	ldi	r26, 0x21	; 33
    1b28:	1a 2e       	mov	r1, r26
    1b2a:	aa 1b       	sub	r26, r26
    1b2c:	bb 1b       	sub	r27, r27
    1b2e:	fd 01       	movw	r30, r26
    1b30:	0d c0       	rjmp	.+26     	; 0x1b4c <__udivmodsi4_ep>

00001b32 <__udivmodsi4_loop>:
    1b32:	aa 1f       	adc	r26, r26
    1b34:	bb 1f       	adc	r27, r27
    1b36:	ee 1f       	adc	r30, r30
    1b38:	ff 1f       	adc	r31, r31
    1b3a:	a2 17       	cp	r26, r18
    1b3c:	b3 07       	cpc	r27, r19
    1b3e:	e4 07       	cpc	r30, r20
    1b40:	f5 07       	cpc	r31, r21
    1b42:	20 f0       	brcs	.+8      	; 0x1b4c <__udivmodsi4_ep>
    1b44:	a2 1b       	sub	r26, r18
    1b46:	b3 0b       	sbc	r27, r19
    1b48:	e4 0b       	sbc	r30, r20
    1b4a:	f5 0b       	sbc	r31, r21

00001b4c <__udivmodsi4_ep>:
    1b4c:	66 1f       	adc	r22, r22
    1b4e:	77 1f       	adc	r23, r23
    1b50:	88 1f       	adc	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	1a 94       	dec	r1
    1b56:	69 f7       	brne	.-38     	; 0x1b32 <__udivmodsi4_loop>
    1b58:	60 95       	com	r22
    1b5a:	70 95       	com	r23
    1b5c:	80 95       	com	r24
    1b5e:	90 95       	com	r25
    1b60:	9b 01       	movw	r18, r22
    1b62:	ac 01       	movw	r20, r24
    1b64:	bd 01       	movw	r22, r26
    1b66:	cf 01       	movw	r24, r30
    1b68:	08 95       	ret

00001b6a <do_rand>:
    1b6a:	8f 92       	push	r8
    1b6c:	9f 92       	push	r9
    1b6e:	af 92       	push	r10
    1b70:	bf 92       	push	r11
    1b72:	cf 92       	push	r12
    1b74:	df 92       	push	r13
    1b76:	ef 92       	push	r14
    1b78:	ff 92       	push	r15
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	ec 01       	movw	r28, r24
    1b80:	68 81       	ld	r22, Y
    1b82:	79 81       	ldd	r23, Y+1	; 0x01
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	9b 81       	ldd	r25, Y+3	; 0x03
    1b88:	61 15       	cp	r22, r1
    1b8a:	71 05       	cpc	r23, r1
    1b8c:	81 05       	cpc	r24, r1
    1b8e:	91 05       	cpc	r25, r1
    1b90:	21 f4       	brne	.+8      	; 0x1b9a <do_rand+0x30>
    1b92:	64 e2       	ldi	r22, 0x24	; 36
    1b94:	79 ed       	ldi	r23, 0xD9	; 217
    1b96:	8b e5       	ldi	r24, 0x5B	; 91
    1b98:	97 e0       	ldi	r25, 0x07	; 7
    1b9a:	2d e1       	ldi	r18, 0x1D	; 29
    1b9c:	33 ef       	ldi	r19, 0xF3	; 243
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__divmodsi4>
    1ba6:	49 01       	movw	r8, r18
    1ba8:	5a 01       	movw	r10, r20
    1baa:	9b 01       	movw	r18, r22
    1bac:	ac 01       	movw	r20, r24
    1bae:	a7 ea       	ldi	r26, 0xA7	; 167
    1bb0:	b1 e4       	ldi	r27, 0x41	; 65
    1bb2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__muluhisi3>
    1bb6:	6b 01       	movw	r12, r22
    1bb8:	7c 01       	movw	r14, r24
    1bba:	ac ee       	ldi	r26, 0xEC	; 236
    1bbc:	b4 ef       	ldi	r27, 0xF4	; 244
    1bbe:	a5 01       	movw	r20, r10
    1bc0:	94 01       	movw	r18, r8
    1bc2:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__mulohisi3>
    1bc6:	c6 0e       	add	r12, r22
    1bc8:	d7 1e       	adc	r13, r23
    1bca:	e8 1e       	adc	r14, r24
    1bcc:	f9 1e       	adc	r15, r25
    1bce:	f7 fe       	sbrs	r15, 7
    1bd0:	06 c0       	rjmp	.+12     	; 0x1bde <do_rand+0x74>
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	c8 1a       	sub	r12, r24
    1bd6:	d1 08       	sbc	r13, r1
    1bd8:	e1 08       	sbc	r14, r1
    1bda:	80 e8       	ldi	r24, 0x80	; 128
    1bdc:	f8 0a       	sbc	r15, r24
    1bde:	c8 82       	st	Y, r12
    1be0:	d9 82       	std	Y+1, r13	; 0x01
    1be2:	ea 82       	std	Y+2, r14	; 0x02
    1be4:	fb 82       	std	Y+3, r15	; 0x03
    1be6:	c6 01       	movw	r24, r12
    1be8:	9f 77       	andi	r25, 0x7F	; 127
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	df 90       	pop	r13
    1bf4:	cf 90       	pop	r12
    1bf6:	bf 90       	pop	r11
    1bf8:	af 90       	pop	r10
    1bfa:	9f 90       	pop	r9
    1bfc:	8f 90       	pop	r8
    1bfe:	08 95       	ret

00001c00 <rand_r>:
    1c00:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <do_rand>
    1c04:	08 95       	ret

00001c06 <rand>:
    1c06:	80 e6       	ldi	r24, 0x60	; 96
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <do_rand>
    1c0e:	08 95       	ret

00001c10 <srand>:
    1c10:	a0 e0       	ldi	r26, 0x00	; 0
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	80 93 60 00 	sts	0x0060, r24
    1c18:	90 93 61 00 	sts	0x0061, r25
    1c1c:	a0 93 62 00 	sts	0x0062, r26
    1c20:	b0 93 63 00 	sts	0x0063, r27
    1c24:	08 95       	ret

00001c26 <__divmodsi4>:
    1c26:	05 2e       	mov	r0, r21
    1c28:	97 fb       	bst	r25, 7
    1c2a:	1e f4       	brtc	.+6      	; 0x1c32 <__divmodsi4+0xc>
    1c2c:	00 94       	com	r0
    1c2e:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__negsi2>
    1c32:	57 fd       	sbrc	r21, 7
    1c34:	07 d0       	rcall	.+14     	; 0x1c44 <__divmodsi4_neg2>
    1c36:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__udivmodsi4>
    1c3a:	07 fc       	sbrc	r0, 7
    1c3c:	03 d0       	rcall	.+6      	; 0x1c44 <__divmodsi4_neg2>
    1c3e:	4e f4       	brtc	.+18     	; 0x1c52 <__divmodsi4_exit>
    1c40:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__negsi2>

00001c44 <__divmodsi4_neg2>:
    1c44:	50 95       	com	r21
    1c46:	40 95       	com	r20
    1c48:	30 95       	com	r19
    1c4a:	21 95       	neg	r18
    1c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4e:	4f 4f       	sbci	r20, 0xFF	; 255
    1c50:	5f 4f       	sbci	r21, 0xFF	; 255

00001c52 <__divmodsi4_exit>:
    1c52:	08 95       	ret

00001c54 <__negsi2>:
    1c54:	90 95       	com	r25
    1c56:	80 95       	com	r24
    1c58:	70 95       	com	r23
    1c5a:	61 95       	neg	r22
    1c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c60:	9f 4f       	sbci	r25, 0xFF	; 255
    1c62:	08 95       	ret

00001c64 <__muluhisi3>:
    1c64:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__umulhisi3>
    1c68:	a5 9f       	mul	r26, r21
    1c6a:	90 0d       	add	r25, r0
    1c6c:	b4 9f       	mul	r27, r20
    1c6e:	90 0d       	add	r25, r0
    1c70:	a4 9f       	mul	r26, r20
    1c72:	80 0d       	add	r24, r0
    1c74:	91 1d       	adc	r25, r1
    1c76:	11 24       	eor	r1, r1
    1c78:	08 95       	ret

00001c7a <__mulshisi3>:
    1c7a:	b7 ff       	sbrs	r27, 7
    1c7c:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__muluhisi3>

00001c80 <__mulohisi3>:
    1c80:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__muluhisi3>
    1c84:	82 1b       	sub	r24, r18
    1c86:	93 0b       	sbc	r25, r19
    1c88:	08 95       	ret

00001c8a <__umulhisi3>:
    1c8a:	a2 9f       	mul	r26, r18
    1c8c:	b0 01       	movw	r22, r0
    1c8e:	b3 9f       	mul	r27, r19
    1c90:	c0 01       	movw	r24, r0
    1c92:	a3 9f       	mul	r26, r19
    1c94:	70 0d       	add	r23, r0
    1c96:	81 1d       	adc	r24, r1
    1c98:	11 24       	eor	r1, r1
    1c9a:	91 1d       	adc	r25, r1
    1c9c:	b2 9f       	mul	r27, r18
    1c9e:	70 0d       	add	r23, r0
    1ca0:	81 1d       	adc	r24, r1
    1ca2:	11 24       	eor	r1, r1
    1ca4:	91 1d       	adc	r25, r1
    1ca6:	08 95       	ret

00001ca8 <_exit>:
    1ca8:	f8 94       	cli

00001caa <__stop_program>:
    1caa:	ff cf       	rjmp	.-2      	; 0x1caa <__stop_program>
